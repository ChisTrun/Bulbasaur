// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bulbasaur/api/bulbasaur.proto

package bulbasaur

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TokenInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenInfoMultiError, or nil
// if none found.
func (m *TokenInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SafeId

	// no validation rules for RefreshToken

	// no validation rules for AccessToken

	// no validation rules for Role

	// no validation rules for UserId

	if len(errors) > 0 {
		return TokenInfoMultiError(errors)
	}

	return nil
}

// TokenInfoMultiError is an error wrapping multiple validation errors returned
// by TokenInfo.ValidateAll() if the designated constraints aren't met.
type TokenInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenInfoMultiError) AllErrors() []error { return m }

// TokenInfoValidationError is the validation error returned by
// TokenInfo.Validate if the designated constraints aren't met.
type TokenInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenInfoValidationError) ErrorName() string { return "TokenInfoValidationError" }

// Error satisfies the builtin error interface
func (e TokenInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenInfoValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Role

	// no validation rules for Id

	if m.Metadata != nil {
		// no validation rules for Metadata
	}

	if m.Local != nil {

		if all {
			switch v := interface{}(m.GetLocal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  "Local",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Google != nil {

		if all {
			switch v := interface{}(m.GetGoogle()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Google",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Google",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGoogle()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  "Google",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on MeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeResponseMultiError, or
// nil if none found.
func (m *MeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeResponseMultiError(errors)
	}

	return nil
}

// MeResponseMultiError is an error wrapping multiple validation errors
// returned by MeResponse.ValidateAll() if the designated constraints aren't met.
type MeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeResponseMultiError) AllErrors() []error { return m }

// MeResponseValidationError is the validation error returned by
// MeResponse.Validate if the designated constraints aren't met.
type MeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeResponseValidationError) ErrorName() string { return "MeResponseValidationError" }

// Error satisfies the builtin error interface
func (e MeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeResponseValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on SignUpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpRequestMultiError, or
// nil if none found.
func (m *SignUpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	switch v := m.Credential.(type) {
	case *SignUpRequest_Local_:
		if v == nil {
			err := SignUpRequestValidationError{
				field:  "Credential",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLocal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignUpRequestValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignUpRequestValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignUpRequestValidationError{
					field:  "Local",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SignUpRequest_Google_:
		if v == nil {
			err := SignUpRequestValidationError{
				field:  "Credential",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGoogle()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignUpRequestValidationError{
						field:  "Google",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignUpRequestValidationError{
						field:  "Google",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGoogle()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignUpRequestValidationError{
					field:  "Google",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.DeviceId != nil {
		// no validation rules for DeviceId
	}

	if m.DeviceName != nil {
		// no validation rules for DeviceName
	}

	if len(errors) > 0 {
		return SignUpRequestMultiError(errors)
	}

	return nil
}

// SignUpRequestMultiError is an error wrapping multiple validation errors
// returned by SignUpRequest.ValidateAll() if the designated constraints
// aren't met.
type SignUpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpRequestMultiError) AllErrors() []error { return m }

// SignUpRequestValidationError is the validation error returned by
// SignUpRequest.Validate if the designated constraints aren't met.
type SignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequestValidationError) ErrorName() string { return "SignUpRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequestValidationError{}

// Validate checks the field values on SignUpResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpResponseMultiError,
// or nil if none found.
func (m *SignUpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokenInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignUpResponseValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignUpResponseValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokenInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignUpResponseValidationError{
				field:  "TokenInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignUpResponseMultiError(errors)
	}

	return nil
}

// SignUpResponseMultiError is an error wrapping multiple validation errors
// returned by SignUpResponse.ValidateAll() if the designated constraints
// aren't met.
type SignUpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpResponseMultiError) AllErrors() []error { return m }

// SignUpResponseValidationError is the validation error returned by
// SignUpResponse.Validate if the designated constraints aren't met.
type SignUpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpResponseValidationError) ErrorName() string { return "SignUpResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignUpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpResponseValidationError{}

// Validate checks the field values on SignInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInRequestMultiError, or
// nil if none found.
func (m *SignInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Credential.(type) {
	case *SignInRequest_Local_:
		if v == nil {
			err := SignInRequestValidationError{
				field:  "Credential",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLocal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignInRequestValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignInRequestValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignInRequestValidationError{
					field:  "Local",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SignInRequest_Google_:
		if v == nil {
			err := SignInRequestValidationError{
				field:  "Credential",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGoogle()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignInRequestValidationError{
						field:  "Google",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignInRequestValidationError{
						field:  "Google",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGoogle()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignInRequestValidationError{
					field:  "Google",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.DeviceId != nil {
		// no validation rules for DeviceId
	}

	if m.DeviceName != nil {
		// no validation rules for DeviceName
	}

	if len(errors) > 0 {
		return SignInRequestMultiError(errors)
	}

	return nil
}

// SignInRequestMultiError is an error wrapping multiple validation errors
// returned by SignInRequest.ValidateAll() if the designated constraints
// aren't met.
type SignInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInRequestMultiError) AllErrors() []error { return m }

// SignInRequestValidationError is the validation error returned by
// SignInRequest.Validate if the designated constraints aren't met.
type SignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequestValidationError) ErrorName() string { return "SignInRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequestValidationError{}

// Validate checks the field values on SignInResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInResponseMultiError,
// or nil if none found.
func (m *SignInResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokenInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignInResponseValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignInResponseValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokenInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignInResponseValidationError{
				field:  "TokenInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignInResponseMultiError(errors)
	}

	return nil
}

// SignInResponseMultiError is an error wrapping multiple validation errors
// returned by SignInResponse.ValidateAll() if the designated constraints
// aren't met.
type SignInResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInResponseMultiError) AllErrors() []error { return m }

// SignInResponseValidationError is the validation error returned by
// SignInResponse.Validate if the designated constraints aren't met.
type SignInResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInResponseValidationError) ErrorName() string { return "SignInResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignInResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInResponseValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokenInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshTokenRequestValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshTokenRequestValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokenInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshTokenRequestValidationError{
				field:  "TokenInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenResponseMultiError, or nil if none found.
func (m *RefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokenInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshTokenResponseValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshTokenResponseValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokenInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshTokenResponseValidationError{
				field:  "TokenInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefreshTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshTokenResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenResponseMultiError) AllErrors() []error { return m }

// RefreshTokenResponseValidationError is the validation error returned by
// RefreshTokenResponse.Validate if the designated constraints aren't met.
type RefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenResponseValidationError) ErrorName() string {
	return "RefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenResponseValidationError{}

// Validate checks the field values on UpdateMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMetadataRequestMultiError, or nil if none found.
func (m *UpdateMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metadata

	if len(errors) > 0 {
		return UpdateMetadataRequestMultiError(errors)
	}

	return nil
}

// UpdateMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMetadataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMetadataRequestMultiError) AllErrors() []error { return m }

// UpdateMetadataRequestValidationError is the validation error returned by
// UpdateMetadataRequest.Validate if the designated constraints aren't met.
type UpdateMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMetadataRequestValidationError) ErrorName() string {
	return "UpdateMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMetadataRequestValidationError{}

// Validate checks the field values on EmailVerificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmailVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailVerificationRequestMultiError, or nil if none found.
func (m *EmailVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return EmailVerificationRequestMultiError(errors)
	}

	return nil
}

// EmailVerificationRequestMultiError is an error wrapping multiple validation
// errors returned by EmailVerificationRequest.ValidateAll() if the designated
// constraints aren't met.
type EmailVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailVerificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailVerificationRequestMultiError) AllErrors() []error { return m }

// EmailVerificationRequestValidationError is the validation error returned by
// EmailVerificationRequest.Validate if the designated constraints aren't met.
type EmailVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailVerificationRequestValidationError) ErrorName() string {
	return "EmailVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EmailVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailVerificationRequestValidationError{}

// Validate checks the field values on ResetCodeVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetCodeVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetCodeVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetCodeVerificationRequestMultiError, or nil if none found.
func (m *ResetCodeVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetCodeVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResetCode

	if len(errors) > 0 {
		return ResetCodeVerificationRequestMultiError(errors)
	}

	return nil
}

// ResetCodeVerificationRequestMultiError is an error wrapping multiple
// validation errors returned by ResetCodeVerificationRequest.ValidateAll() if
// the designated constraints aren't met.
type ResetCodeVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetCodeVerificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetCodeVerificationRequestMultiError) AllErrors() []error { return m }

// ResetCodeVerificationRequestValidationError is the validation error returned
// by ResetCodeVerificationRequest.Validate if the designated constraints
// aren't met.
type ResetCodeVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCodeVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCodeVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCodeVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCodeVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCodeVerificationRequestValidationError) ErrorName() string {
	return "ResetCodeVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCodeVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCodeVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCodeVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCodeVerificationRequestValidationError{}

// Validate checks the field values on ResetCodeVerificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetCodeVerificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetCodeVerificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResetCodeVerificationResponseMultiError, or nil if none found.
func (m *ResetCodeVerificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetCodeVerificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return ResetCodeVerificationResponseMultiError(errors)
	}

	return nil
}

// ResetCodeVerificationResponseMultiError is an error wrapping multiple
// validation errors returned by ResetCodeVerificationResponse.ValidateAll()
// if the designated constraints aren't met.
type ResetCodeVerificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetCodeVerificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetCodeVerificationResponseMultiError) AllErrors() []error { return m }

// ResetCodeVerificationResponseValidationError is the validation error
// returned by ResetCodeVerificationResponse.Validate if the designated
// constraints aren't met.
type ResetCodeVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCodeVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCodeVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCodeVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCodeVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCodeVerificationResponseValidationError) ErrorName() string {
	return "ResetCodeVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCodeVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCodeVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCodeVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCodeVerificationResponseValidationError{}

// Validate checks the field values on GenerateResetCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateResetCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateResetCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateResetCodeRequestMultiError, or nil if none found.
func (m *GenerateResetCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateResetCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return GenerateResetCodeRequestMultiError(errors)
	}

	return nil
}

// GenerateResetCodeRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateResetCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateResetCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateResetCodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateResetCodeRequestMultiError) AllErrors() []error { return m }

// GenerateResetCodeRequestValidationError is the validation error returned by
// GenerateResetCodeRequest.Validate if the designated constraints aren't met.
type GenerateResetCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateResetCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateResetCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateResetCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateResetCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateResetCodeRequestValidationError) ErrorName() string {
	return "GenerateResetCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateResetCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateResetCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateResetCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateResetCodeRequestValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRequestMultiError, or nil if none found.
func (m *ResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for ResetCode

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return ResetPasswordRequestMultiError(errors)
	}

	return nil
}

// ResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRequestMultiError) AllErrors() []error { return m }

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

// Validate checks the field values on User_LocalInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *User_LocalInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_LocalInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in User_LocalInfoMultiError,
// or nil if none found.
func (m *User_LocalInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *User_LocalInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Fullname != nil {
		// no validation rules for Fullname
	}

	if m.Company != nil {
		// no validation rules for Company
	}

	if m.Country != nil {
		// no validation rules for Country
	}

	if m.JobTitle != nil {
		// no validation rules for JobTitle
	}

	if m.AvatarPath != nil {
		// no validation rules for AvatarPath
	}

	if len(errors) > 0 {
		return User_LocalInfoMultiError(errors)
	}

	return nil
}

// User_LocalInfoMultiError is an error wrapping multiple validation errors
// returned by User_LocalInfo.ValidateAll() if the designated constraints
// aren't met.
type User_LocalInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_LocalInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_LocalInfoMultiError) AllErrors() []error { return m }

// User_LocalInfoValidationError is the validation error returned by
// User_LocalInfo.Validate if the designated constraints aren't met.
type User_LocalInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_LocalInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_LocalInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_LocalInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_LocalInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_LocalInfoValidationError) ErrorName() string { return "User_LocalInfoValidationError" }

// Error satisfies the builtin error interface
func (e User_LocalInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_LocalInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_LocalInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_LocalInfoValidationError{}

// Validate checks the field values on User_GoogleInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *User_GoogleInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_GoogleInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// User_GoogleInfoMultiError, or nil if none found.
func (m *User_GoogleInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *User_GoogleInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Fullname != nil {
		// no validation rules for Fullname
	}

	if m.AvatarPath != nil {
		// no validation rules for AvatarPath
	}

	if len(errors) > 0 {
		return User_GoogleInfoMultiError(errors)
	}

	return nil
}

// User_GoogleInfoMultiError is an error wrapping multiple validation errors
// returned by User_GoogleInfo.ValidateAll() if the designated constraints
// aren't met.
type User_GoogleInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_GoogleInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_GoogleInfoMultiError) AllErrors() []error { return m }

// User_GoogleInfoValidationError is the validation error returned by
// User_GoogleInfo.Validate if the designated constraints aren't met.
type User_GoogleInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_GoogleInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_GoogleInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_GoogleInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_GoogleInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_GoogleInfoValidationError) ErrorName() string { return "User_GoogleInfoValidationError" }

// Error satisfies the builtin error interface
func (e User_GoogleInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_GoogleInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_GoogleInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_GoogleInfoValidationError{}

// Validate checks the field values on SignUpRequest_Local with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignUpRequest_Local) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpRequest_Local with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignUpRequest_LocalMultiError, or nil if none found.
func (m *SignUpRequest_Local) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpRequest_Local) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for ConfirmPassword

	// no validation rules for Email

	// no validation rules for Fullname

	// no validation rules for Otp

	if m.Company != nil {
		// no validation rules for Company
	}

	if m.Country != nil {
		// no validation rules for Country
	}

	if m.JobTitle != nil {
		// no validation rules for JobTitle
	}

	if len(errors) > 0 {
		return SignUpRequest_LocalMultiError(errors)
	}

	return nil
}

// SignUpRequest_LocalMultiError is an error wrapping multiple validation
// errors returned by SignUpRequest_Local.ValidateAll() if the designated
// constraints aren't met.
type SignUpRequest_LocalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpRequest_LocalMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpRequest_LocalMultiError) AllErrors() []error { return m }

// SignUpRequest_LocalValidationError is the validation error returned by
// SignUpRequest_Local.Validate if the designated constraints aren't met.
type SignUpRequest_LocalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequest_LocalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequest_LocalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequest_LocalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequest_LocalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequest_LocalValidationError) ErrorName() string {
	return "SignUpRequest_LocalValidationError"
}

// Error satisfies the builtin error interface
func (e SignUpRequest_LocalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest_Local.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequest_LocalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequest_LocalValidationError{}

// Validate checks the field values on SignUpRequest_Google with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignUpRequest_Google) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpRequest_Google with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignUpRequest_GoogleMultiError, or nil if none found.
func (m *SignUpRequest_Google) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpRequest_Google) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Credential

	if len(errors) > 0 {
		return SignUpRequest_GoogleMultiError(errors)
	}

	return nil
}

// SignUpRequest_GoogleMultiError is an error wrapping multiple validation
// errors returned by SignUpRequest_Google.ValidateAll() if the designated
// constraints aren't met.
type SignUpRequest_GoogleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpRequest_GoogleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpRequest_GoogleMultiError) AllErrors() []error { return m }

// SignUpRequest_GoogleValidationError is the validation error returned by
// SignUpRequest_Google.Validate if the designated constraints aren't met.
type SignUpRequest_GoogleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequest_GoogleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequest_GoogleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequest_GoogleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequest_GoogleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequest_GoogleValidationError) ErrorName() string {
	return "SignUpRequest_GoogleValidationError"
}

// Error satisfies the builtin error interface
func (e SignUpRequest_GoogleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest_Google.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequest_GoogleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequest_GoogleValidationError{}

// Validate checks the field values on SignInRequest_Local with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignInRequest_Local) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInRequest_Local with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignInRequest_LocalMultiError, or nil if none found.
func (m *SignInRequest_Local) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInRequest_Local) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return SignInRequest_LocalMultiError(errors)
	}

	return nil
}

// SignInRequest_LocalMultiError is an error wrapping multiple validation
// errors returned by SignInRequest_Local.ValidateAll() if the designated
// constraints aren't met.
type SignInRequest_LocalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInRequest_LocalMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInRequest_LocalMultiError) AllErrors() []error { return m }

// SignInRequest_LocalValidationError is the validation error returned by
// SignInRequest_Local.Validate if the designated constraints aren't met.
type SignInRequest_LocalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequest_LocalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequest_LocalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequest_LocalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequest_LocalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequest_LocalValidationError) ErrorName() string {
	return "SignInRequest_LocalValidationError"
}

// Error satisfies the builtin error interface
func (e SignInRequest_LocalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequest_Local.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequest_LocalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequest_LocalValidationError{}

// Validate checks the field values on SignInRequest_Google with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignInRequest_Google) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInRequest_Google with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignInRequest_GoogleMultiError, or nil if none found.
func (m *SignInRequest_Google) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInRequest_Google) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Credential

	if len(errors) > 0 {
		return SignInRequest_GoogleMultiError(errors)
	}

	return nil
}

// SignInRequest_GoogleMultiError is an error wrapping multiple validation
// errors returned by SignInRequest_Google.ValidateAll() if the designated
// constraints aren't met.
type SignInRequest_GoogleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInRequest_GoogleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInRequest_GoogleMultiError) AllErrors() []error { return m }

// SignInRequest_GoogleValidationError is the validation error returned by
// SignInRequest_Google.Validate if the designated constraints aren't met.
type SignInRequest_GoogleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequest_GoogleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequest_GoogleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequest_GoogleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequest_GoogleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequest_GoogleValidationError) ErrorName() string {
	return "SignInRequest_GoogleValidationError"
}

// Error satisfies the builtin error interface
func (e SignInRequest_GoogleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequest_Google.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequest_GoogleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequest_GoogleValidationError{}
