/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.0
 * source: logger/api/logger.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace greyhole.logger {
    export class Logger extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            level?: Logger.Level;
            pretty?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("pretty" in data && data.pretty != undefined) {
                    this.pretty = data.pretty;
                }
            }
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 1, Logger.Level.UNSPECIFIED) as Logger.Level;
        }
        set level(value: Logger.Level) {
            pb_1.Message.setField(this, 1, value);
        }
        get pretty() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set pretty(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            level?: Logger.Level;
            pretty?: boolean;
        }): Logger {
            const message = new Logger({});
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.pretty != null) {
                message.pretty = data.pretty;
            }
            return message;
        }
        toObject() {
            const data: {
                level?: Logger.Level;
                pretty?: boolean;
            } = {};
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.pretty != null) {
                data.pretty = this.pretty;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.level != Logger.Level.UNSPECIFIED)
                writer.writeEnum(1, this.level);
            if (this.pretty != false)
                writer.writeBool(2, this.pretty);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Logger {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Logger();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.level = reader.readEnum();
                        break;
                    case 2:
                        message.pretty = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Logger {
            return Logger.deserialize(bytes);
        }
    }
    export namespace Logger {
        export enum Level {
            UNSPECIFIED = 0,
            DEBUG = 1,
            INFO = 2,
            WARN = 3,
            ERROR = 4,
            PANIC = 5,
            FATAL = 6
        }
    }
}
