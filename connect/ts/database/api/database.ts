/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.0
 * source: database/api/database.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as pb_1 from "google-protobuf";
export namespace greyhole.database {
    export class Database extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            host?: string;
            port?: number;
            name?: string;
            tracing_enabled?: boolean;
            debug?: boolean;
            max_idle_conns?: number;
            max_open_conns?: number;
            conn_max_life_time?: number;
            conn_max_idle_time?: number;
            auth_method?: Database.AuthMethod;
            username?: string;
            password?: string;
            aws_region?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("tracing_enabled" in data && data.tracing_enabled != undefined) {
                    this.tracing_enabled = data.tracing_enabled;
                }
                if ("debug" in data && data.debug != undefined) {
                    this.debug = data.debug;
                }
                if ("max_idle_conns" in data && data.max_idle_conns != undefined) {
                    this.max_idle_conns = data.max_idle_conns;
                }
                if ("max_open_conns" in data && data.max_open_conns != undefined) {
                    this.max_open_conns = data.max_open_conns;
                }
                if ("conn_max_life_time" in data && data.conn_max_life_time != undefined) {
                    this.conn_max_life_time = data.conn_max_life_time;
                }
                if ("conn_max_idle_time" in data && data.conn_max_idle_time != undefined) {
                    this.conn_max_idle_time = data.conn_max_idle_time;
                }
                if ("auth_method" in data && data.auth_method != undefined) {
                    this.auth_method = data.auth_method;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("aws_region" in data && data.aws_region != undefined) {
                    this.aws_region = data.aws_region;
                }
            }
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set host(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tracing_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set tracing_enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get debug() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set debug(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get max_idle_conns() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set max_idle_conns(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get max_open_conns() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set max_open_conns(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get conn_max_life_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set conn_max_life_time(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get conn_max_idle_time() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set conn_max_idle_time(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get auth_method() {
            return pb_1.Message.getFieldWithDefault(this, 10, Database.AuthMethod.AUTH_METHOD_UNSPECIFIED) as Database.AuthMethod;
        }
        set auth_method(value: Database.AuthMethod) {
            pb_1.Message.setField(this, 10, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get aws_region() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set aws_region(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            host?: string;
            port?: number;
            name?: string;
            tracing_enabled?: boolean;
            debug?: boolean;
            max_idle_conns?: number;
            max_open_conns?: number;
            conn_max_life_time?: number;
            conn_max_idle_time?: number;
            auth_method?: Database.AuthMethod;
            username?: string;
            password?: string;
            aws_region?: string;
        }): Database {
            const message = new Database({});
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.tracing_enabled != null) {
                message.tracing_enabled = data.tracing_enabled;
            }
            if (data.debug != null) {
                message.debug = data.debug;
            }
            if (data.max_idle_conns != null) {
                message.max_idle_conns = data.max_idle_conns;
            }
            if (data.max_open_conns != null) {
                message.max_open_conns = data.max_open_conns;
            }
            if (data.conn_max_life_time != null) {
                message.conn_max_life_time = data.conn_max_life_time;
            }
            if (data.conn_max_idle_time != null) {
                message.conn_max_idle_time = data.conn_max_idle_time;
            }
            if (data.auth_method != null) {
                message.auth_method = data.auth_method;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.aws_region != null) {
                message.aws_region = data.aws_region;
            }
            return message;
        }
        toObject() {
            const data: {
                host?: string;
                port?: number;
                name?: string;
                tracing_enabled?: boolean;
                debug?: boolean;
                max_idle_conns?: number;
                max_open_conns?: number;
                conn_max_life_time?: number;
                conn_max_idle_time?: number;
                auth_method?: Database.AuthMethod;
                username?: string;
                password?: string;
                aws_region?: string;
            } = {};
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.tracing_enabled != null) {
                data.tracing_enabled = this.tracing_enabled;
            }
            if (this.debug != null) {
                data.debug = this.debug;
            }
            if (this.max_idle_conns != null) {
                data.max_idle_conns = this.max_idle_conns;
            }
            if (this.max_open_conns != null) {
                data.max_open_conns = this.max_open_conns;
            }
            if (this.conn_max_life_time != null) {
                data.conn_max_life_time = this.conn_max_life_time;
            }
            if (this.conn_max_idle_time != null) {
                data.conn_max_idle_time = this.conn_max_idle_time;
            }
            if (this.auth_method != null) {
                data.auth_method = this.auth_method;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.aws_region != null) {
                data.aws_region = this.aws_region;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.host.length)
                writer.writeString(1, this.host);
            if (this.port != 0)
                writer.writeUint32(2, this.port);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.tracing_enabled != false)
                writer.writeBool(4, this.tracing_enabled);
            if (this.debug != false)
                writer.writeBool(5, this.debug);
            if (this.max_idle_conns != 0)
                writer.writeUint32(6, this.max_idle_conns);
            if (this.max_open_conns != 0)
                writer.writeUint32(7, this.max_open_conns);
            if (this.conn_max_life_time != 0)
                writer.writeUint32(8, this.conn_max_life_time);
            if (this.conn_max_idle_time != 0)
                writer.writeUint32(9, this.conn_max_idle_time);
            if (this.auth_method != Database.AuthMethod.AUTH_METHOD_UNSPECIFIED)
                writer.writeEnum(10, this.auth_method);
            if (this.username.length)
                writer.writeString(11, this.username);
            if (this.password.length)
                writer.writeString(12, this.password);
            if (this.aws_region.length)
                writer.writeString(13, this.aws_region);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Database {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Database();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.host = reader.readString();
                        break;
                    case 2:
                        message.port = reader.readUint32();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.tracing_enabled = reader.readBool();
                        break;
                    case 5:
                        message.debug = reader.readBool();
                        break;
                    case 6:
                        message.max_idle_conns = reader.readUint32();
                        break;
                    case 7:
                        message.max_open_conns = reader.readUint32();
                        break;
                    case 8:
                        message.conn_max_life_time = reader.readUint32();
                        break;
                    case 9:
                        message.conn_max_idle_time = reader.readUint32();
                        break;
                    case 10:
                        message.auth_method = reader.readEnum();
                        break;
                    case 11:
                        message.username = reader.readString();
                        break;
                    case 12:
                        message.password = reader.readString();
                        break;
                    case 13:
                        message.aws_region = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Database {
            return Database.deserialize(bytes);
        }
    }
    export namespace Database {
        export enum AuthMethod {
            AUTH_METHOD_UNSPECIFIED = 0,
            AUTH_METHOD_NONE = 1,
            AUTH_METHOD_USERNAME_PASSWORD = 2,
            AUTH_METHOD_AWS_IAM = 4
        }
    }
}
