/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.0
 * source: bulbasaur_config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./validate/validate";
import * as dependency_2 from "./logger/api/logger";
import * as dependency_3 from "./carbon/api/carbon";
import * as dependency_4 from "./redis/api/redis";
import * as dependency_5 from "./database/api/database";
import * as pb_1 from "google-protobuf";
export namespace bulbasaur.config {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            listener?: dependency_3.greyhole.carbon.Listener;
            logger?: dependency_2.greyhole.logger.Logger;
            database?: dependency_5.greyhole.database.Database;
            redis?: dependency_4.greyhole.redis.Redis;
            http_listener?: dependency_3.greyhole.carbon.Listener;
            auth?: Auth;
            google?: Google;
            frontend?: FrontEnd;
            mailer?: Mailer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("listener" in data && data.listener != undefined) {
                    this.listener = data.listener;
                }
                if ("logger" in data && data.logger != undefined) {
                    this.logger = data.logger;
                }
                if ("database" in data && data.database != undefined) {
                    this.database = data.database;
                }
                if ("redis" in data && data.redis != undefined) {
                    this.redis = data.redis;
                }
                if ("http_listener" in data && data.http_listener != undefined) {
                    this.http_listener = data.http_listener;
                }
                if ("auth" in data && data.auth != undefined) {
                    this.auth = data.auth;
                }
                if ("google" in data && data.google != undefined) {
                    this.google = data.google;
                }
                if ("frontend" in data && data.frontend != undefined) {
                    this.frontend = data.frontend;
                }
                if ("mailer" in data && data.mailer != undefined) {
                    this.mailer = data.mailer;
                }
            }
        }
        get listener() {
            return pb_1.Message.getWrapperField(this, dependency_3.greyhole.carbon.Listener, 1) as dependency_3.greyhole.carbon.Listener;
        }
        set listener(value: dependency_3.greyhole.carbon.Listener) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_listener() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get logger() {
            return pb_1.Message.getWrapperField(this, dependency_2.greyhole.logger.Logger, 2) as dependency_2.greyhole.logger.Logger;
        }
        set logger(value: dependency_2.greyhole.logger.Logger) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_logger() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get database() {
            return pb_1.Message.getWrapperField(this, dependency_5.greyhole.database.Database, 3) as dependency_5.greyhole.database.Database;
        }
        set database(value: dependency_5.greyhole.database.Database) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_database() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get redis() {
            return pb_1.Message.getWrapperField(this, dependency_4.greyhole.redis.Redis, 4) as dependency_4.greyhole.redis.Redis;
        }
        set redis(value: dependency_4.greyhole.redis.Redis) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_redis() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get http_listener() {
            return pb_1.Message.getWrapperField(this, dependency_3.greyhole.carbon.Listener, 8) as dependency_3.greyhole.carbon.Listener;
        }
        set http_listener(value: dependency_3.greyhole.carbon.Listener) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_http_listener() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get auth() {
            return pb_1.Message.getWrapperField(this, Auth, 9) as Auth;
        }
        set auth(value: Auth) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_auth() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get google() {
            return pb_1.Message.getWrapperField(this, Google, 10) as Google;
        }
        set google(value: Google) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_google() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get frontend() {
            return pb_1.Message.getWrapperField(this, FrontEnd, 11) as FrontEnd;
        }
        set frontend(value: FrontEnd) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_frontend() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get mailer() {
            return pb_1.Message.getWrapperField(this, Mailer, 12) as Mailer;
        }
        set mailer(value: Mailer) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_mailer() {
            return pb_1.Message.getField(this, 12) != null;
        }
        static fromObject(data: {
            listener?: ReturnType<typeof dependency_3.greyhole.carbon.Listener.prototype.toObject>;
            logger?: ReturnType<typeof dependency_2.greyhole.logger.Logger.prototype.toObject>;
            database?: ReturnType<typeof dependency_5.greyhole.database.Database.prototype.toObject>;
            redis?: ReturnType<typeof dependency_4.greyhole.redis.Redis.prototype.toObject>;
            http_listener?: ReturnType<typeof dependency_3.greyhole.carbon.Listener.prototype.toObject>;
            auth?: ReturnType<typeof Auth.prototype.toObject>;
            google?: ReturnType<typeof Google.prototype.toObject>;
            frontend?: ReturnType<typeof FrontEnd.prototype.toObject>;
            mailer?: ReturnType<typeof Mailer.prototype.toObject>;
        }): Config {
            const message = new Config({});
            if (data.listener != null) {
                message.listener = dependency_3.greyhole.carbon.Listener.fromObject(data.listener);
            }
            if (data.logger != null) {
                message.logger = dependency_2.greyhole.logger.Logger.fromObject(data.logger);
            }
            if (data.database != null) {
                message.database = dependency_5.greyhole.database.Database.fromObject(data.database);
            }
            if (data.redis != null) {
                message.redis = dependency_4.greyhole.redis.Redis.fromObject(data.redis);
            }
            if (data.http_listener != null) {
                message.http_listener = dependency_3.greyhole.carbon.Listener.fromObject(data.http_listener);
            }
            if (data.auth != null) {
                message.auth = Auth.fromObject(data.auth);
            }
            if (data.google != null) {
                message.google = Google.fromObject(data.google);
            }
            if (data.frontend != null) {
                message.frontend = FrontEnd.fromObject(data.frontend);
            }
            if (data.mailer != null) {
                message.mailer = Mailer.fromObject(data.mailer);
            }
            return message;
        }
        toObject() {
            const data: {
                listener?: ReturnType<typeof dependency_3.greyhole.carbon.Listener.prototype.toObject>;
                logger?: ReturnType<typeof dependency_2.greyhole.logger.Logger.prototype.toObject>;
                database?: ReturnType<typeof dependency_5.greyhole.database.Database.prototype.toObject>;
                redis?: ReturnType<typeof dependency_4.greyhole.redis.Redis.prototype.toObject>;
                http_listener?: ReturnType<typeof dependency_3.greyhole.carbon.Listener.prototype.toObject>;
                auth?: ReturnType<typeof Auth.prototype.toObject>;
                google?: ReturnType<typeof Google.prototype.toObject>;
                frontend?: ReturnType<typeof FrontEnd.prototype.toObject>;
                mailer?: ReturnType<typeof Mailer.prototype.toObject>;
            } = {};
            if (this.listener != null) {
                data.listener = this.listener.toObject();
            }
            if (this.logger != null) {
                data.logger = this.logger.toObject();
            }
            if (this.database != null) {
                data.database = this.database.toObject();
            }
            if (this.redis != null) {
                data.redis = this.redis.toObject();
            }
            if (this.http_listener != null) {
                data.http_listener = this.http_listener.toObject();
            }
            if (this.auth != null) {
                data.auth = this.auth.toObject();
            }
            if (this.google != null) {
                data.google = this.google.toObject();
            }
            if (this.frontend != null) {
                data.frontend = this.frontend.toObject();
            }
            if (this.mailer != null) {
                data.mailer = this.mailer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_listener)
                writer.writeMessage(1, this.listener, () => this.listener.serialize(writer));
            if (this.has_logger)
                writer.writeMessage(2, this.logger, () => this.logger.serialize(writer));
            if (this.has_database)
                writer.writeMessage(3, this.database, () => this.database.serialize(writer));
            if (this.has_redis)
                writer.writeMessage(4, this.redis, () => this.redis.serialize(writer));
            if (this.has_http_listener)
                writer.writeMessage(8, this.http_listener, () => this.http_listener.serialize(writer));
            if (this.has_auth)
                writer.writeMessage(9, this.auth, () => this.auth.serialize(writer));
            if (this.has_google)
                writer.writeMessage(10, this.google, () => this.google.serialize(writer));
            if (this.has_frontend)
                writer.writeMessage(11, this.frontend, () => this.frontend.serialize(writer));
            if (this.has_mailer)
                writer.writeMessage(12, this.mailer, () => this.mailer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.listener, () => message.listener = dependency_3.greyhole.carbon.Listener.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.logger, () => message.logger = dependency_2.greyhole.logger.Logger.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.database, () => message.database = dependency_5.greyhole.database.Database.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.redis, () => message.redis = dependency_4.greyhole.redis.Redis.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.http_listener, () => message.http_listener = dependency_3.greyhole.carbon.Listener.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.auth, () => message.auth = Auth.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.google, () => message.google = Google.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.frontend, () => message.frontend = FrontEnd.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.mailer, () => message.mailer = Mailer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    export class Auth extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            AccessKey?: string;
            AccessExp?: number;
            RefreshKey?: string;
            RefreshExp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("AccessKey" in data && data.AccessKey != undefined) {
                    this.AccessKey = data.AccessKey;
                }
                if ("AccessExp" in data && data.AccessExp != undefined) {
                    this.AccessExp = data.AccessExp;
                }
                if ("RefreshKey" in data && data.RefreshKey != undefined) {
                    this.RefreshKey = data.RefreshKey;
                }
                if ("RefreshExp" in data && data.RefreshExp != undefined) {
                    this.RefreshExp = data.RefreshExp;
                }
            }
        }
        get AccessKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set AccessKey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get AccessExp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set AccessExp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get RefreshKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set RefreshKey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get RefreshExp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set RefreshExp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            AccessKey?: string;
            AccessExp?: number;
            RefreshKey?: string;
            RefreshExp?: number;
        }): Auth {
            const message = new Auth({});
            if (data.AccessKey != null) {
                message.AccessKey = data.AccessKey;
            }
            if (data.AccessExp != null) {
                message.AccessExp = data.AccessExp;
            }
            if (data.RefreshKey != null) {
                message.RefreshKey = data.RefreshKey;
            }
            if (data.RefreshExp != null) {
                message.RefreshExp = data.RefreshExp;
            }
            return message;
        }
        toObject() {
            const data: {
                AccessKey?: string;
                AccessExp?: number;
                RefreshKey?: string;
                RefreshExp?: number;
            } = {};
            if (this.AccessKey != null) {
                data.AccessKey = this.AccessKey;
            }
            if (this.AccessExp != null) {
                data.AccessExp = this.AccessExp;
            }
            if (this.RefreshKey != null) {
                data.RefreshKey = this.RefreshKey;
            }
            if (this.RefreshExp != null) {
                data.RefreshExp = this.RefreshExp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.AccessKey.length)
                writer.writeString(1, this.AccessKey);
            if (this.AccessExp != 0)
                writer.writeInt32(2, this.AccessExp);
            if (this.RefreshKey.length)
                writer.writeString(3, this.RefreshKey);
            if (this.RefreshExp != 0)
                writer.writeInt32(4, this.RefreshExp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Auth {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Auth();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.AccessKey = reader.readString();
                        break;
                    case 2:
                        message.AccessExp = reader.readInt32();
                        break;
                    case 3:
                        message.RefreshKey = reader.readString();
                        break;
                    case 4:
                        message.RefreshExp = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Auth {
            return Auth.deserialize(bytes);
        }
    }
    export class Google extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ClientID?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ClientID" in data && data.ClientID != undefined) {
                    this.ClientID = data.ClientID;
                }
            }
        }
        get ClientID() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ClientID(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ClientID?: string;
        }): Google {
            const message = new Google({});
            if (data.ClientID != null) {
                message.ClientID = data.ClientID;
            }
            return message;
        }
        toObject() {
            const data: {
                ClientID?: string;
            } = {};
            if (this.ClientID != null) {
                data.ClientID = this.ClientID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ClientID.length)
                writer.writeString(1, this.ClientID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Google {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Google();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ClientID = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Google {
            return Google.deserialize(bytes);
        }
    }
    export class FrontEnd extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Url?: string;
            ResetPasswordEndpoint?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Url" in data && data.Url != undefined) {
                    this.Url = data.Url;
                }
                if ("ResetPasswordEndpoint" in data && data.ResetPasswordEndpoint != undefined) {
                    this.ResetPasswordEndpoint = data.ResetPasswordEndpoint;
                }
            }
        }
        get Url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ResetPasswordEndpoint() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ResetPasswordEndpoint(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Url?: string;
            ResetPasswordEndpoint?: string;
        }): FrontEnd {
            const message = new FrontEnd({});
            if (data.Url != null) {
                message.Url = data.Url;
            }
            if (data.ResetPasswordEndpoint != null) {
                message.ResetPasswordEndpoint = data.ResetPasswordEndpoint;
            }
            return message;
        }
        toObject() {
            const data: {
                Url?: string;
                ResetPasswordEndpoint?: string;
            } = {};
            if (this.Url != null) {
                data.Url = this.Url;
            }
            if (this.ResetPasswordEndpoint != null) {
                data.ResetPasswordEndpoint = this.ResetPasswordEndpoint;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Url.length)
                writer.writeString(1, this.Url);
            if (this.ResetPasswordEndpoint.length)
                writer.writeString(2, this.ResetPasswordEndpoint);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FrontEnd {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FrontEnd();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Url = reader.readString();
                        break;
                    case 2:
                        message.ResetPasswordEndpoint = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FrontEnd {
            return FrontEnd.deserialize(bytes);
        }
    }
    export class Mailer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Domain?: string;
            Endpoint?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Domain" in data && data.Domain != undefined) {
                    this.Domain = data.Domain;
                }
                if ("Endpoint" in data && data.Endpoint != undefined) {
                    this.Endpoint = data.Endpoint;
                }
            }
        }
        get Domain() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Domain(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Endpoint(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Domain?: string;
            Endpoint?: string;
        }): Mailer {
            const message = new Mailer({});
            if (data.Domain != null) {
                message.Domain = data.Domain;
            }
            if (data.Endpoint != null) {
                message.Endpoint = data.Endpoint;
            }
            return message;
        }
        toObject() {
            const data: {
                Domain?: string;
                Endpoint?: string;
            } = {};
            if (this.Domain != null) {
                data.Domain = this.Domain;
            }
            if (this.Endpoint != null) {
                data.Endpoint = this.Endpoint;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Domain.length)
                writer.writeString(1, this.Domain);
            if (this.Endpoint.length)
                writer.writeString(2, this.Endpoint);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Mailer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Mailer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Domain = reader.readString();
                        break;
                    case 2:
                        message.Endpoint = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Mailer {
            return Mailer.deserialize(bytes);
        }
    }
}
