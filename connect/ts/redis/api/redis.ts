/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.0
 * source: redis/api/redis.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as dependency_2 from "./../../carbon/api/carbon";
import * as pb_1 from "google-protobuf";
export namespace greyhole.redis {
    export class Redis extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            username?: string;
            password?: string;
            db?: number;
            max_retries?: number;
            min_retry_backoff?: number;
            max_retry_backoff?: number;
            dial_timeout?: number;
            read_timeout?: number;
            write_timeout?: number;
            context_timeout_enabled?: boolean;
            pool_fifo?: boolean;
            pool_size?: number;
            pool_timeout?: number;
            min_idle_conns?: number;
            max_idle_conns?: number;
            conn_max_idle_time?: number;
            conn_max_lifetime?: number;
            tls?: dependency_2.greyhole.carbon.TLS;
            namespace?: string;
            debug?: boolean;
            client_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("db" in data && data.db != undefined) {
                    this.db = data.db;
                }
                if ("max_retries" in data && data.max_retries != undefined) {
                    this.max_retries = data.max_retries;
                }
                if ("min_retry_backoff" in data && data.min_retry_backoff != undefined) {
                    this.min_retry_backoff = data.min_retry_backoff;
                }
                if ("max_retry_backoff" in data && data.max_retry_backoff != undefined) {
                    this.max_retry_backoff = data.max_retry_backoff;
                }
                if ("dial_timeout" in data && data.dial_timeout != undefined) {
                    this.dial_timeout = data.dial_timeout;
                }
                if ("read_timeout" in data && data.read_timeout != undefined) {
                    this.read_timeout = data.read_timeout;
                }
                if ("write_timeout" in data && data.write_timeout != undefined) {
                    this.write_timeout = data.write_timeout;
                }
                if ("context_timeout_enabled" in data && data.context_timeout_enabled != undefined) {
                    this.context_timeout_enabled = data.context_timeout_enabled;
                }
                if ("pool_fifo" in data && data.pool_fifo != undefined) {
                    this.pool_fifo = data.pool_fifo;
                }
                if ("pool_size" in data && data.pool_size != undefined) {
                    this.pool_size = data.pool_size;
                }
                if ("pool_timeout" in data && data.pool_timeout != undefined) {
                    this.pool_timeout = data.pool_timeout;
                }
                if ("min_idle_conns" in data && data.min_idle_conns != undefined) {
                    this.min_idle_conns = data.min_idle_conns;
                }
                if ("max_idle_conns" in data && data.max_idle_conns != undefined) {
                    this.max_idle_conns = data.max_idle_conns;
                }
                if ("conn_max_idle_time" in data && data.conn_max_idle_time != undefined) {
                    this.conn_max_idle_time = data.conn_max_idle_time;
                }
                if ("conn_max_lifetime" in data && data.conn_max_lifetime != undefined) {
                    this.conn_max_lifetime = data.conn_max_lifetime;
                }
                if ("tls" in data && data.tls != undefined) {
                    this.tls = data.tls;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("debug" in data && data.debug != undefined) {
                    this.debug = data.debug;
                }
                if ("client_name" in data && data.client_name != undefined) {
                    this.client_name = data.client_name;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get db() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set db(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get max_retries() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_retries(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get min_retry_backoff() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set min_retry_backoff(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get max_retry_backoff() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set max_retry_backoff(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get dial_timeout() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set dial_timeout(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get read_timeout() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set read_timeout(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get write_timeout() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set write_timeout(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get context_timeout_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set context_timeout_enabled(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get pool_fifo() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set pool_fifo(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get pool_size() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set pool_size(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get pool_timeout() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set pool_timeout(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get min_idle_conns() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set min_idle_conns(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get max_idle_conns() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set max_idle_conns(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get conn_max_idle_time() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set conn_max_idle_time(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get conn_max_lifetime() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set conn_max_lifetime(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get tls() {
            return pb_1.Message.getWrapperField(this, dependency_2.greyhole.carbon.TLS, 19) as dependency_2.greyhole.carbon.TLS;
        }
        set tls(value: dependency_2.greyhole.carbon.TLS) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get has_tls() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get debug() {
            return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
        }
        set debug(value: boolean) {
            pb_1.Message.setField(this, 21, value);
        }
        get client_name() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set client_name(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        static fromObject(data: {
            address?: string;
            username?: string;
            password?: string;
            db?: number;
            max_retries?: number;
            min_retry_backoff?: number;
            max_retry_backoff?: number;
            dial_timeout?: number;
            read_timeout?: number;
            write_timeout?: number;
            context_timeout_enabled?: boolean;
            pool_fifo?: boolean;
            pool_size?: number;
            pool_timeout?: number;
            min_idle_conns?: number;
            max_idle_conns?: number;
            conn_max_idle_time?: number;
            conn_max_lifetime?: number;
            tls?: ReturnType<typeof dependency_2.greyhole.carbon.TLS.prototype.toObject>;
            namespace?: string;
            debug?: boolean;
            client_name?: string;
        }): Redis {
            const message = new Redis({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.db != null) {
                message.db = data.db;
            }
            if (data.max_retries != null) {
                message.max_retries = data.max_retries;
            }
            if (data.min_retry_backoff != null) {
                message.min_retry_backoff = data.min_retry_backoff;
            }
            if (data.max_retry_backoff != null) {
                message.max_retry_backoff = data.max_retry_backoff;
            }
            if (data.dial_timeout != null) {
                message.dial_timeout = data.dial_timeout;
            }
            if (data.read_timeout != null) {
                message.read_timeout = data.read_timeout;
            }
            if (data.write_timeout != null) {
                message.write_timeout = data.write_timeout;
            }
            if (data.context_timeout_enabled != null) {
                message.context_timeout_enabled = data.context_timeout_enabled;
            }
            if (data.pool_fifo != null) {
                message.pool_fifo = data.pool_fifo;
            }
            if (data.pool_size != null) {
                message.pool_size = data.pool_size;
            }
            if (data.pool_timeout != null) {
                message.pool_timeout = data.pool_timeout;
            }
            if (data.min_idle_conns != null) {
                message.min_idle_conns = data.min_idle_conns;
            }
            if (data.max_idle_conns != null) {
                message.max_idle_conns = data.max_idle_conns;
            }
            if (data.conn_max_idle_time != null) {
                message.conn_max_idle_time = data.conn_max_idle_time;
            }
            if (data.conn_max_lifetime != null) {
                message.conn_max_lifetime = data.conn_max_lifetime;
            }
            if (data.tls != null) {
                message.tls = dependency_2.greyhole.carbon.TLS.fromObject(data.tls);
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.debug != null) {
                message.debug = data.debug;
            }
            if (data.client_name != null) {
                message.client_name = data.client_name;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                username?: string;
                password?: string;
                db?: number;
                max_retries?: number;
                min_retry_backoff?: number;
                max_retry_backoff?: number;
                dial_timeout?: number;
                read_timeout?: number;
                write_timeout?: number;
                context_timeout_enabled?: boolean;
                pool_fifo?: boolean;
                pool_size?: number;
                pool_timeout?: number;
                min_idle_conns?: number;
                max_idle_conns?: number;
                conn_max_idle_time?: number;
                conn_max_lifetime?: number;
                tls?: ReturnType<typeof dependency_2.greyhole.carbon.TLS.prototype.toObject>;
                namespace?: string;
                debug?: boolean;
                client_name?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.db != null) {
                data.db = this.db;
            }
            if (this.max_retries != null) {
                data.max_retries = this.max_retries;
            }
            if (this.min_retry_backoff != null) {
                data.min_retry_backoff = this.min_retry_backoff;
            }
            if (this.max_retry_backoff != null) {
                data.max_retry_backoff = this.max_retry_backoff;
            }
            if (this.dial_timeout != null) {
                data.dial_timeout = this.dial_timeout;
            }
            if (this.read_timeout != null) {
                data.read_timeout = this.read_timeout;
            }
            if (this.write_timeout != null) {
                data.write_timeout = this.write_timeout;
            }
            if (this.context_timeout_enabled != null) {
                data.context_timeout_enabled = this.context_timeout_enabled;
            }
            if (this.pool_fifo != null) {
                data.pool_fifo = this.pool_fifo;
            }
            if (this.pool_size != null) {
                data.pool_size = this.pool_size;
            }
            if (this.pool_timeout != null) {
                data.pool_timeout = this.pool_timeout;
            }
            if (this.min_idle_conns != null) {
                data.min_idle_conns = this.min_idle_conns;
            }
            if (this.max_idle_conns != null) {
                data.max_idle_conns = this.max_idle_conns;
            }
            if (this.conn_max_idle_time != null) {
                data.conn_max_idle_time = this.conn_max_idle_time;
            }
            if (this.conn_max_lifetime != null) {
                data.conn_max_lifetime = this.conn_max_lifetime;
            }
            if (this.tls != null) {
                data.tls = this.tls.toObject();
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.debug != null) {
                data.debug = this.debug;
            }
            if (this.client_name != null) {
                data.client_name = this.client_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.db != 0)
                writer.writeInt32(4, this.db);
            if (this.max_retries != 0)
                writer.writeInt32(5, this.max_retries);
            if (this.min_retry_backoff != 0)
                writer.writeInt64(6, this.min_retry_backoff);
            if (this.max_retry_backoff != 0)
                writer.writeInt64(7, this.max_retry_backoff);
            if (this.dial_timeout != 0)
                writer.writeInt64(8, this.dial_timeout);
            if (this.read_timeout != 0)
                writer.writeInt64(9, this.read_timeout);
            if (this.write_timeout != 0)
                writer.writeInt64(10, this.write_timeout);
            if (this.context_timeout_enabled != false)
                writer.writeBool(11, this.context_timeout_enabled);
            if (this.pool_fifo != false)
                writer.writeBool(12, this.pool_fifo);
            if (this.pool_size != 0)
                writer.writeInt32(13, this.pool_size);
            if (this.pool_timeout != 0)
                writer.writeInt64(14, this.pool_timeout);
            if (this.min_idle_conns != 0)
                writer.writeInt32(15, this.min_idle_conns);
            if (this.max_idle_conns != 0)
                writer.writeInt64(16, this.max_idle_conns);
            if (this.conn_max_idle_time != 0)
                writer.writeInt64(17, this.conn_max_idle_time);
            if (this.conn_max_lifetime != 0)
                writer.writeInt64(18, this.conn_max_lifetime);
            if (this.has_tls)
                writer.writeMessage(19, this.tls, () => this.tls.serialize(writer));
            if (this.namespace.length)
                writer.writeString(20, this.namespace);
            if (this.debug != false)
                writer.writeBool(21, this.debug);
            if (this.client_name.length)
                writer.writeString(22, this.client_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Redis {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Redis();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.db = reader.readInt32();
                        break;
                    case 5:
                        message.max_retries = reader.readInt32();
                        break;
                    case 6:
                        message.min_retry_backoff = reader.readInt64();
                        break;
                    case 7:
                        message.max_retry_backoff = reader.readInt64();
                        break;
                    case 8:
                        message.dial_timeout = reader.readInt64();
                        break;
                    case 9:
                        message.read_timeout = reader.readInt64();
                        break;
                    case 10:
                        message.write_timeout = reader.readInt64();
                        break;
                    case 11:
                        message.context_timeout_enabled = reader.readBool();
                        break;
                    case 12:
                        message.pool_fifo = reader.readBool();
                        break;
                    case 13:
                        message.pool_size = reader.readInt32();
                        break;
                    case 14:
                        message.pool_timeout = reader.readInt64();
                        break;
                    case 15:
                        message.min_idle_conns = reader.readInt32();
                        break;
                    case 16:
                        message.max_idle_conns = reader.readInt64();
                        break;
                    case 17:
                        message.conn_max_idle_time = reader.readInt64();
                        break;
                    case 18:
                        message.conn_max_lifetime = reader.readInt64();
                        break;
                    case 19:
                        reader.readMessage(message.tls, () => message.tls = dependency_2.greyhole.carbon.TLS.deserialize(reader));
                        break;
                    case 20:
                        message.namespace = reader.readString();
                        break;
                    case 21:
                        message.debug = reader.readBool();
                        break;
                    case 22:
                        message.client_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Redis {
            return Redis.deserialize(bytes);
        }
    }
}
