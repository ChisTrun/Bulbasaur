// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bulbasaur/pkg/ent/google"
	"bulbasaur/pkg/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoogleCreate is the builder for creating a Google entity.
type GoogleCreate struct {
	config
	mutation *GoogleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gc *GoogleCreate) SetCreatedAt(t time.Time) *GoogleCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GoogleCreate) SetNillableCreatedAt(t *time.Time) *GoogleCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GoogleCreate) SetUpdatedAt(t time.Time) *GoogleCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GoogleCreate) SetNillableUpdatedAt(t *time.Time) *GoogleCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetTenantID sets the "tenant_id" field.
func (gc *GoogleCreate) SetTenantID(s string) *GoogleCreate {
	gc.mutation.SetTenantID(s)
	return gc
}

// SetUserID sets the "user_id" field.
func (gc *GoogleCreate) SetUserID(u uint64) *GoogleCreate {
	gc.mutation.SetUserID(u)
	return gc
}

// SetEmail sets the "email" field.
func (gc *GoogleCreate) SetEmail(s string) *GoogleCreate {
	gc.mutation.SetEmail(s)
	return gc
}

// SetFullname sets the "fullname" field.
func (gc *GoogleCreate) SetFullname(s string) *GoogleCreate {
	gc.mutation.SetFullname(s)
	return gc
}

// SetNillableFullname sets the "fullname" field if the given value is not nil.
func (gc *GoogleCreate) SetNillableFullname(s *string) *GoogleCreate {
	if s != nil {
		gc.SetFullname(*s)
	}
	return gc
}

// SetAvatarPath sets the "avatarPath" field.
func (gc *GoogleCreate) SetAvatarPath(s string) *GoogleCreate {
	gc.mutation.SetAvatarPath(s)
	return gc
}

// SetNillableAvatarPath sets the "avatarPath" field if the given value is not nil.
func (gc *GoogleCreate) SetNillableAvatarPath(s *string) *GoogleCreate {
	if s != nil {
		gc.SetAvatarPath(*s)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GoogleCreate) SetID(u uint64) *GoogleCreate {
	gc.mutation.SetID(u)
	return gc
}

// SetUser sets the "user" edge to the User entity.
func (gc *GoogleCreate) SetUser(u *User) *GoogleCreate {
	return gc.SetUserID(u.ID)
}

// Mutation returns the GoogleMutation object of the builder.
func (gc *GoogleCreate) Mutation() *GoogleMutation {
	return gc.mutation
}

// Save creates the Google in the database.
func (gc *GoogleCreate) Save(ctx context.Context) (*Google, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GoogleCreate) SaveX(ctx context.Context) *Google {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GoogleCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GoogleCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GoogleCreate) defaults() {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := google.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		v := google.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GoogleCreate) check() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Google.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Google.updated_at"`)}
	}
	if _, ok := gc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Google.tenant_id"`)}
	}
	if _, ok := gc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Google.user_id"`)}
	}
	if _, ok := gc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Google.email"`)}
	}
	if v, ok := gc.mutation.Email(); ok {
		if err := google.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Google.email": %w`, err)}
		}
	}
	if len(gc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Google.user"`)}
	}
	return nil
}

func (gc *GoogleCreate) sqlSave(ctx context.Context) (*Google, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GoogleCreate) createSpec() (*Google, *sqlgraph.CreateSpec) {
	var (
		_node = &Google{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(google.Table, sqlgraph.NewFieldSpec(google.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = gc.conflict
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(google.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(google.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.TenantID(); ok {
		_spec.SetField(google.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := gc.mutation.Email(); ok {
		_spec.SetField(google.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := gc.mutation.Fullname(); ok {
		_spec.SetField(google.FieldFullname, field.TypeString, value)
		_node.Fullname = &value
	}
	if value, ok := gc.mutation.AvatarPath(); ok {
		_spec.SetField(google.FieldAvatarPath, field.TypeString, value)
		_node.AvatarPath = &value
	}
	if nodes := gc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   google.UserTable,
			Columns: []string{google.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Google.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoogleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gc *GoogleCreate) OnConflict(opts ...sql.ConflictOption) *GoogleUpsertOne {
	gc.conflict = opts
	return &GoogleUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Google.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gc *GoogleCreate) OnConflictColumns(columns ...string) *GoogleUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GoogleUpsertOne{
		create: gc,
	}
}

type (
	// GoogleUpsertOne is the builder for "upsert"-ing
	//  one Google node.
	GoogleUpsertOne struct {
		create *GoogleCreate
	}

	// GoogleUpsert is the "OnConflict" setter.
	GoogleUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *GoogleUpsert) SetUpdatedAt(v time.Time) *GoogleUpsert {
	u.Set(google.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoogleUpsert) UpdateUpdatedAt() *GoogleUpsert {
	u.SetExcluded(google.FieldUpdatedAt)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *GoogleUpsert) SetTenantID(v string) *GoogleUpsert {
	u.Set(google.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *GoogleUpsert) UpdateTenantID() *GoogleUpsert {
	u.SetExcluded(google.FieldTenantID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GoogleUpsert) SetUserID(v uint64) *GoogleUpsert {
	u.Set(google.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoogleUpsert) UpdateUserID() *GoogleUpsert {
	u.SetExcluded(google.FieldUserID)
	return u
}

// SetEmail sets the "email" field.
func (u *GoogleUpsert) SetEmail(v string) *GoogleUpsert {
	u.Set(google.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *GoogleUpsert) UpdateEmail() *GoogleUpsert {
	u.SetExcluded(google.FieldEmail)
	return u
}

// SetFullname sets the "fullname" field.
func (u *GoogleUpsert) SetFullname(v string) *GoogleUpsert {
	u.Set(google.FieldFullname, v)
	return u
}

// UpdateFullname sets the "fullname" field to the value that was provided on create.
func (u *GoogleUpsert) UpdateFullname() *GoogleUpsert {
	u.SetExcluded(google.FieldFullname)
	return u
}

// ClearFullname clears the value of the "fullname" field.
func (u *GoogleUpsert) ClearFullname() *GoogleUpsert {
	u.SetNull(google.FieldFullname)
	return u
}

// SetAvatarPath sets the "avatarPath" field.
func (u *GoogleUpsert) SetAvatarPath(v string) *GoogleUpsert {
	u.Set(google.FieldAvatarPath, v)
	return u
}

// UpdateAvatarPath sets the "avatarPath" field to the value that was provided on create.
func (u *GoogleUpsert) UpdateAvatarPath() *GoogleUpsert {
	u.SetExcluded(google.FieldAvatarPath)
	return u
}

// ClearAvatarPath clears the value of the "avatarPath" field.
func (u *GoogleUpsert) ClearAvatarPath() *GoogleUpsert {
	u.SetNull(google.FieldAvatarPath)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Google.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(google.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoogleUpsertOne) UpdateNewValues() *GoogleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(google.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(google.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Google.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GoogleUpsertOne) Ignore() *GoogleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoogleUpsertOne) DoNothing() *GoogleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoogleCreate.OnConflict
// documentation for more info.
func (u *GoogleUpsertOne) Update(set func(*GoogleUpsert)) *GoogleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoogleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoogleUpsertOne) SetUpdatedAt(v time.Time) *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoogleUpsertOne) UpdateUpdatedAt() *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *GoogleUpsertOne) SetTenantID(v string) *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *GoogleUpsertOne) UpdateTenantID() *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateTenantID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoogleUpsertOne) SetUserID(v uint64) *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoogleUpsertOne) UpdateUserID() *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateUserID()
	})
}

// SetEmail sets the "email" field.
func (u *GoogleUpsertOne) SetEmail(v string) *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *GoogleUpsertOne) UpdateEmail() *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateEmail()
	})
}

// SetFullname sets the "fullname" field.
func (u *GoogleUpsertOne) SetFullname(v string) *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.SetFullname(v)
	})
}

// UpdateFullname sets the "fullname" field to the value that was provided on create.
func (u *GoogleUpsertOne) UpdateFullname() *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateFullname()
	})
}

// ClearFullname clears the value of the "fullname" field.
func (u *GoogleUpsertOne) ClearFullname() *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.ClearFullname()
	})
}

// SetAvatarPath sets the "avatarPath" field.
func (u *GoogleUpsertOne) SetAvatarPath(v string) *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.SetAvatarPath(v)
	})
}

// UpdateAvatarPath sets the "avatarPath" field to the value that was provided on create.
func (u *GoogleUpsertOne) UpdateAvatarPath() *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateAvatarPath()
	})
}

// ClearAvatarPath clears the value of the "avatarPath" field.
func (u *GoogleUpsertOne) ClearAvatarPath() *GoogleUpsertOne {
	return u.Update(func(s *GoogleUpsert) {
		s.ClearAvatarPath()
	})
}

// Exec executes the query.
func (u *GoogleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoogleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoogleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoogleUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoogleUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoogleCreateBulk is the builder for creating many Google entities in bulk.
type GoogleCreateBulk struct {
	config
	err      error
	builders []*GoogleCreate
	conflict []sql.ConflictOption
}

// Save creates the Google entities in the database.
func (gcb *GoogleCreateBulk) Save(ctx context.Context) ([]*Google, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Google, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoogleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GoogleCreateBulk) SaveX(ctx context.Context) []*Google {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GoogleCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GoogleCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Google.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoogleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gcb *GoogleCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoogleUpsertBulk {
	gcb.conflict = opts
	return &GoogleUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Google.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcb *GoogleCreateBulk) OnConflictColumns(columns ...string) *GoogleUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GoogleUpsertBulk{
		create: gcb,
	}
}

// GoogleUpsertBulk is the builder for "upsert"-ing
// a bulk of Google nodes.
type GoogleUpsertBulk struct {
	create *GoogleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Google.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(google.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoogleUpsertBulk) UpdateNewValues() *GoogleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(google.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(google.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Google.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GoogleUpsertBulk) Ignore() *GoogleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoogleUpsertBulk) DoNothing() *GoogleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoogleCreateBulk.OnConflict
// documentation for more info.
func (u *GoogleUpsertBulk) Update(set func(*GoogleUpsert)) *GoogleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoogleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoogleUpsertBulk) SetUpdatedAt(v time.Time) *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoogleUpsertBulk) UpdateUpdatedAt() *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *GoogleUpsertBulk) SetTenantID(v string) *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *GoogleUpsertBulk) UpdateTenantID() *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateTenantID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoogleUpsertBulk) SetUserID(v uint64) *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoogleUpsertBulk) UpdateUserID() *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateUserID()
	})
}

// SetEmail sets the "email" field.
func (u *GoogleUpsertBulk) SetEmail(v string) *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *GoogleUpsertBulk) UpdateEmail() *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateEmail()
	})
}

// SetFullname sets the "fullname" field.
func (u *GoogleUpsertBulk) SetFullname(v string) *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.SetFullname(v)
	})
}

// UpdateFullname sets the "fullname" field to the value that was provided on create.
func (u *GoogleUpsertBulk) UpdateFullname() *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateFullname()
	})
}

// ClearFullname clears the value of the "fullname" field.
func (u *GoogleUpsertBulk) ClearFullname() *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.ClearFullname()
	})
}

// SetAvatarPath sets the "avatarPath" field.
func (u *GoogleUpsertBulk) SetAvatarPath(v string) *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.SetAvatarPath(v)
	})
}

// UpdateAvatarPath sets the "avatarPath" field to the value that was provided on create.
func (u *GoogleUpsertBulk) UpdateAvatarPath() *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.UpdateAvatarPath()
	})
}

// ClearAvatarPath clears the value of the "avatarPath" field.
func (u *GoogleUpsertBulk) ClearAvatarPath() *GoogleUpsertBulk {
	return u.Update(func(s *GoogleUpsert) {
		s.ClearAvatarPath()
	})
}

// Exec executes the query.
func (u *GoogleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoogleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoogleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoogleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
