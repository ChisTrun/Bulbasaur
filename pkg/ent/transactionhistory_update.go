// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bulbasaur/pkg/ent/predicate"
	"bulbasaur/pkg/ent/transactionhistory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionHistoryUpdate is the builder for updating TransactionHistory entities.
type TransactionHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TransactionHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TransactionHistoryUpdate builder.
func (thu *TransactionHistoryUpdate) Where(ps ...predicate.TransactionHistory) *TransactionHistoryUpdate {
	thu.mutation.Where(ps...)
	return thu
}

// SetUpdatedAt sets the "updated_at" field.
func (thu *TransactionHistoryUpdate) SetUpdatedAt(t time.Time) *TransactionHistoryUpdate {
	thu.mutation.SetUpdatedAt(t)
	return thu
}

// SetUserID sets the "user_id" field.
func (thu *TransactionHistoryUpdate) SetUserID(u uint64) *TransactionHistoryUpdate {
	thu.mutation.ResetUserID()
	thu.mutation.SetUserID(u)
	return thu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (thu *TransactionHistoryUpdate) SetNillableUserID(u *uint64) *TransactionHistoryUpdate {
	if u != nil {
		thu.SetUserID(*u)
	}
	return thu
}

// AddUserID adds u to the "user_id" field.
func (thu *TransactionHistoryUpdate) AddUserID(u int64) *TransactionHistoryUpdate {
	thu.mutation.AddUserID(u)
	return thu
}

// SetAmount sets the "amount" field.
func (thu *TransactionHistoryUpdate) SetAmount(f float64) *TransactionHistoryUpdate {
	thu.mutation.ResetAmount()
	thu.mutation.SetAmount(f)
	return thu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (thu *TransactionHistoryUpdate) SetNillableAmount(f *float64) *TransactionHistoryUpdate {
	if f != nil {
		thu.SetAmount(*f)
	}
	return thu
}

// AddAmount adds f to the "amount" field.
func (thu *TransactionHistoryUpdate) AddAmount(f float64) *TransactionHistoryUpdate {
	thu.mutation.AddAmount(f)
	return thu
}

// SetNote sets the "note" field.
func (thu *TransactionHistoryUpdate) SetNote(s string) *TransactionHistoryUpdate {
	thu.mutation.SetNote(s)
	return thu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (thu *TransactionHistoryUpdate) SetNillableNote(s *string) *TransactionHistoryUpdate {
	if s != nil {
		thu.SetNote(*s)
	}
	return thu
}

// Mutation returns the TransactionHistoryMutation object of the builder.
func (thu *TransactionHistoryUpdate) Mutation() *TransactionHistoryMutation {
	return thu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (thu *TransactionHistoryUpdate) Save(ctx context.Context) (int, error) {
	thu.defaults()
	return withHooks(ctx, thu.sqlSave, thu.mutation, thu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thu *TransactionHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := thu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (thu *TransactionHistoryUpdate) Exec(ctx context.Context) error {
	_, err := thu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thu *TransactionHistoryUpdate) ExecX(ctx context.Context) {
	if err := thu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thu *TransactionHistoryUpdate) defaults() {
	if _, ok := thu.mutation.UpdatedAt(); !ok {
		v := transactionhistory.UpdateDefaultUpdatedAt()
		thu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (thu *TransactionHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionHistoryUpdate {
	thu.modifiers = append(thu.modifiers, modifiers...)
	return thu
}

func (thu *TransactionHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(transactionhistory.Table, transactionhistory.Columns, sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeUint64))
	if ps := thu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thu.mutation.UpdatedAt(); ok {
		_spec.SetField(transactionhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := thu.mutation.UserID(); ok {
		_spec.SetField(transactionhistory.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := thu.mutation.AddedUserID(); ok {
		_spec.AddField(transactionhistory.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := thu.mutation.Amount(); ok {
		_spec.SetField(transactionhistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := thu.mutation.AddedAmount(); ok {
		_spec.AddField(transactionhistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := thu.mutation.Note(); ok {
		_spec.SetField(transactionhistory.FieldNote, field.TypeString, value)
	}
	_spec.AddModifiers(thu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, thu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	thu.mutation.done = true
	return n, nil
}

// TransactionHistoryUpdateOne is the builder for updating a single TransactionHistory entity.
type TransactionHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TransactionHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (thuo *TransactionHistoryUpdateOne) SetUpdatedAt(t time.Time) *TransactionHistoryUpdateOne {
	thuo.mutation.SetUpdatedAt(t)
	return thuo
}

// SetUserID sets the "user_id" field.
func (thuo *TransactionHistoryUpdateOne) SetUserID(u uint64) *TransactionHistoryUpdateOne {
	thuo.mutation.ResetUserID()
	thuo.mutation.SetUserID(u)
	return thuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (thuo *TransactionHistoryUpdateOne) SetNillableUserID(u *uint64) *TransactionHistoryUpdateOne {
	if u != nil {
		thuo.SetUserID(*u)
	}
	return thuo
}

// AddUserID adds u to the "user_id" field.
func (thuo *TransactionHistoryUpdateOne) AddUserID(u int64) *TransactionHistoryUpdateOne {
	thuo.mutation.AddUserID(u)
	return thuo
}

// SetAmount sets the "amount" field.
func (thuo *TransactionHistoryUpdateOne) SetAmount(f float64) *TransactionHistoryUpdateOne {
	thuo.mutation.ResetAmount()
	thuo.mutation.SetAmount(f)
	return thuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (thuo *TransactionHistoryUpdateOne) SetNillableAmount(f *float64) *TransactionHistoryUpdateOne {
	if f != nil {
		thuo.SetAmount(*f)
	}
	return thuo
}

// AddAmount adds f to the "amount" field.
func (thuo *TransactionHistoryUpdateOne) AddAmount(f float64) *TransactionHistoryUpdateOne {
	thuo.mutation.AddAmount(f)
	return thuo
}

// SetNote sets the "note" field.
func (thuo *TransactionHistoryUpdateOne) SetNote(s string) *TransactionHistoryUpdateOne {
	thuo.mutation.SetNote(s)
	return thuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (thuo *TransactionHistoryUpdateOne) SetNillableNote(s *string) *TransactionHistoryUpdateOne {
	if s != nil {
		thuo.SetNote(*s)
	}
	return thuo
}

// Mutation returns the TransactionHistoryMutation object of the builder.
func (thuo *TransactionHistoryUpdateOne) Mutation() *TransactionHistoryMutation {
	return thuo.mutation
}

// Where appends a list predicates to the TransactionHistoryUpdate builder.
func (thuo *TransactionHistoryUpdateOne) Where(ps ...predicate.TransactionHistory) *TransactionHistoryUpdateOne {
	thuo.mutation.Where(ps...)
	return thuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (thuo *TransactionHistoryUpdateOne) Select(field string, fields ...string) *TransactionHistoryUpdateOne {
	thuo.fields = append([]string{field}, fields...)
	return thuo
}

// Save executes the query and returns the updated TransactionHistory entity.
func (thuo *TransactionHistoryUpdateOne) Save(ctx context.Context) (*TransactionHistory, error) {
	thuo.defaults()
	return withHooks(ctx, thuo.sqlSave, thuo.mutation, thuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thuo *TransactionHistoryUpdateOne) SaveX(ctx context.Context) *TransactionHistory {
	node, err := thuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (thuo *TransactionHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := thuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thuo *TransactionHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := thuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thuo *TransactionHistoryUpdateOne) defaults() {
	if _, ok := thuo.mutation.UpdatedAt(); !ok {
		v := transactionhistory.UpdateDefaultUpdatedAt()
		thuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (thuo *TransactionHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionHistoryUpdateOne {
	thuo.modifiers = append(thuo.modifiers, modifiers...)
	return thuo
}

func (thuo *TransactionHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TransactionHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(transactionhistory.Table, transactionhistory.Columns, sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeUint64))
	id, ok := thuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TransactionHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := thuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactionhistory.FieldID)
		for _, f := range fields {
			if !transactionhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transactionhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := thuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transactionhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := thuo.mutation.UserID(); ok {
		_spec.SetField(transactionhistory.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := thuo.mutation.AddedUserID(); ok {
		_spec.AddField(transactionhistory.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := thuo.mutation.Amount(); ok {
		_spec.SetField(transactionhistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := thuo.mutation.AddedAmount(); ok {
		_spec.AddField(transactionhistory.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := thuo.mutation.Note(); ok {
		_spec.SetField(transactionhistory.FieldNote, field.TypeString, value)
	}
	_spec.AddModifiers(thuo.modifiers...)
	_node = &TransactionHistory{config: thuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, thuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	thuo.mutation.done = true
	return _node, nil
}
