// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"bulbasaur/pkg/ent/migrate"

	"bulbasaur/pkg/ent/google"
	"bulbasaur/pkg/ent/local"
	"bulbasaur/pkg/ent/transactionhistory"
	"bulbasaur/pkg/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Google is the client for interacting with the Google builders.
	Google *GoogleClient
	// Local is the client for interacting with the Local builders.
	Local *LocalClient
	// TransactionHistory is the client for interacting with the TransactionHistory builders.
	TransactionHistory *TransactionHistoryClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Google = NewGoogleClient(c.config)
	c.Local = NewLocalClient(c.config)
	c.TransactionHistory = NewTransactionHistoryClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Google:             NewGoogleClient(cfg),
		Local:              NewLocalClient(cfg),
		TransactionHistory: NewTransactionHistoryClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Google:             NewGoogleClient(cfg),
		Local:              NewLocalClient(cfg),
		TransactionHistory: NewTransactionHistoryClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Google.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Google.Use(hooks...)
	c.Local.Use(hooks...)
	c.TransactionHistory.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Google.Intercept(interceptors...)
	c.Local.Intercept(interceptors...)
	c.TransactionHistory.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *GoogleMutation:
		return c.Google.mutate(ctx, m)
	case *LocalMutation:
		return c.Local.mutate(ctx, m)
	case *TransactionHistoryMutation:
		return c.TransactionHistory.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// GoogleClient is a client for the Google schema.
type GoogleClient struct {
	config
}

// NewGoogleClient returns a client for the Google from the given config.
func NewGoogleClient(c config) *GoogleClient {
	return &GoogleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `google.Hooks(f(g(h())))`.
func (c *GoogleClient) Use(hooks ...Hook) {
	c.hooks.Google = append(c.hooks.Google, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `google.Intercept(f(g(h())))`.
func (c *GoogleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Google = append(c.inters.Google, interceptors...)
}

// Create returns a builder for creating a Google entity.
func (c *GoogleClient) Create() *GoogleCreate {
	mutation := newGoogleMutation(c.config, OpCreate)
	return &GoogleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Google entities.
func (c *GoogleClient) CreateBulk(builders ...*GoogleCreate) *GoogleCreateBulk {
	return &GoogleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GoogleClient) MapCreateBulk(slice any, setFunc func(*GoogleCreate, int)) *GoogleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GoogleCreateBulk{err: fmt.Errorf("calling to GoogleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GoogleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GoogleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Google.
func (c *GoogleClient) Update() *GoogleUpdate {
	mutation := newGoogleMutation(c.config, OpUpdate)
	return &GoogleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoogleClient) UpdateOne(_go *Google) *GoogleUpdateOne {
	mutation := newGoogleMutation(c.config, OpUpdateOne, withGoogle(_go))
	return &GoogleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoogleClient) UpdateOneID(id uint64) *GoogleUpdateOne {
	mutation := newGoogleMutation(c.config, OpUpdateOne, withGoogleID(id))
	return &GoogleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Google.
func (c *GoogleClient) Delete() *GoogleDelete {
	mutation := newGoogleMutation(c.config, OpDelete)
	return &GoogleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoogleClient) DeleteOne(_go *Google) *GoogleDeleteOne {
	return c.DeleteOneID(_go.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoogleClient) DeleteOneID(id uint64) *GoogleDeleteOne {
	builder := c.Delete().Where(google.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoogleDeleteOne{builder}
}

// Query returns a query builder for Google.
func (c *GoogleClient) Query() *GoogleQuery {
	return &GoogleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGoogle},
		inters: c.Interceptors(),
	}
}

// Get returns a Google entity by its id.
func (c *GoogleClient) Get(ctx context.Context, id uint64) (*Google, error) {
	return c.Query().Where(google.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoogleClient) GetX(ctx context.Context, id uint64) *Google {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Google.
func (c *GoogleClient) QueryUser(_go *Google) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(google.Table, google.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, google.UserTable, google.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoogleClient) Hooks() []Hook {
	return c.hooks.Google
}

// Interceptors returns the client interceptors.
func (c *GoogleClient) Interceptors() []Interceptor {
	return c.inters.Google
}

func (c *GoogleClient) mutate(ctx context.Context, m *GoogleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoogleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoogleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoogleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoogleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Google mutation op: %q", m.Op())
	}
}

// LocalClient is a client for the Local schema.
type LocalClient struct {
	config
}

// NewLocalClient returns a client for the Local from the given config.
func NewLocalClient(c config) *LocalClient {
	return &LocalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `local.Hooks(f(g(h())))`.
func (c *LocalClient) Use(hooks ...Hook) {
	c.hooks.Local = append(c.hooks.Local, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `local.Intercept(f(g(h())))`.
func (c *LocalClient) Intercept(interceptors ...Interceptor) {
	c.inters.Local = append(c.inters.Local, interceptors...)
}

// Create returns a builder for creating a Local entity.
func (c *LocalClient) Create() *LocalCreate {
	mutation := newLocalMutation(c.config, OpCreate)
	return &LocalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Local entities.
func (c *LocalClient) CreateBulk(builders ...*LocalCreate) *LocalCreateBulk {
	return &LocalCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LocalClient) MapCreateBulk(slice any, setFunc func(*LocalCreate, int)) *LocalCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LocalCreateBulk{err: fmt.Errorf("calling to LocalClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LocalCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LocalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Local.
func (c *LocalClient) Update() *LocalUpdate {
	mutation := newLocalMutation(c.config, OpUpdate)
	return &LocalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocalClient) UpdateOne(l *Local) *LocalUpdateOne {
	mutation := newLocalMutation(c.config, OpUpdateOne, withLocal(l))
	return &LocalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocalClient) UpdateOneID(id uint64) *LocalUpdateOne {
	mutation := newLocalMutation(c.config, OpUpdateOne, withLocalID(id))
	return &LocalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Local.
func (c *LocalClient) Delete() *LocalDelete {
	mutation := newLocalMutation(c.config, OpDelete)
	return &LocalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocalClient) DeleteOne(l *Local) *LocalDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocalClient) DeleteOneID(id uint64) *LocalDeleteOne {
	builder := c.Delete().Where(local.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocalDeleteOne{builder}
}

// Query returns a query builder for Local.
func (c *LocalClient) Query() *LocalQuery {
	return &LocalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocal},
		inters: c.Interceptors(),
	}
}

// Get returns a Local entity by its id.
func (c *LocalClient) Get(ctx context.Context, id uint64) (*Local, error) {
	return c.Query().Where(local.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocalClient) GetX(ctx context.Context, id uint64) *Local {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Local.
func (c *LocalClient) QueryUser(l *Local) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(local.Table, local.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, local.UserTable, local.UserColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocalClient) Hooks() []Hook {
	return c.hooks.Local
}

// Interceptors returns the client interceptors.
func (c *LocalClient) Interceptors() []Interceptor {
	return c.inters.Local
}

func (c *LocalClient) mutate(ctx context.Context, m *LocalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Local mutation op: %q", m.Op())
	}
}

// TransactionHistoryClient is a client for the TransactionHistory schema.
type TransactionHistoryClient struct {
	config
}

// NewTransactionHistoryClient returns a client for the TransactionHistory from the given config.
func NewTransactionHistoryClient(c config) *TransactionHistoryClient {
	return &TransactionHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactionhistory.Hooks(f(g(h())))`.
func (c *TransactionHistoryClient) Use(hooks ...Hook) {
	c.hooks.TransactionHistory = append(c.hooks.TransactionHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transactionhistory.Intercept(f(g(h())))`.
func (c *TransactionHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.TransactionHistory = append(c.inters.TransactionHistory, interceptors...)
}

// Create returns a builder for creating a TransactionHistory entity.
func (c *TransactionHistoryClient) Create() *TransactionHistoryCreate {
	mutation := newTransactionHistoryMutation(c.config, OpCreate)
	return &TransactionHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TransactionHistory entities.
func (c *TransactionHistoryClient) CreateBulk(builders ...*TransactionHistoryCreate) *TransactionHistoryCreateBulk {
	return &TransactionHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TransactionHistoryClient) MapCreateBulk(slice any, setFunc func(*TransactionHistoryCreate, int)) *TransactionHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TransactionHistoryCreateBulk{err: fmt.Errorf("calling to TransactionHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TransactionHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TransactionHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TransactionHistory.
func (c *TransactionHistoryClient) Update() *TransactionHistoryUpdate {
	mutation := newTransactionHistoryMutation(c.config, OpUpdate)
	return &TransactionHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionHistoryClient) UpdateOne(th *TransactionHistory) *TransactionHistoryUpdateOne {
	mutation := newTransactionHistoryMutation(c.config, OpUpdateOne, withTransactionHistory(th))
	return &TransactionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionHistoryClient) UpdateOneID(id uint64) *TransactionHistoryUpdateOne {
	mutation := newTransactionHistoryMutation(c.config, OpUpdateOne, withTransactionHistoryID(id))
	return &TransactionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TransactionHistory.
func (c *TransactionHistoryClient) Delete() *TransactionHistoryDelete {
	mutation := newTransactionHistoryMutation(c.config, OpDelete)
	return &TransactionHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionHistoryClient) DeleteOne(th *TransactionHistory) *TransactionHistoryDeleteOne {
	return c.DeleteOneID(th.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionHistoryClient) DeleteOneID(id uint64) *TransactionHistoryDeleteOne {
	builder := c.Delete().Where(transactionhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionHistoryDeleteOne{builder}
}

// Query returns a query builder for TransactionHistory.
func (c *TransactionHistoryClient) Query() *TransactionHistoryQuery {
	return &TransactionHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransactionHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a TransactionHistory entity by its id.
func (c *TransactionHistoryClient) Get(ctx context.Context, id uint64) (*TransactionHistory, error) {
	return c.Query().Where(transactionhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionHistoryClient) GetX(ctx context.Context, id uint64) *TransactionHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TransactionHistoryClient) Hooks() []Hook {
	return c.hooks.TransactionHistory
}

// Interceptors returns the client interceptors.
func (c *TransactionHistoryClient) Interceptors() []Interceptor {
	return c.inters.TransactionHistory
}

func (c *TransactionHistoryClient) mutate(ctx context.Context, m *TransactionHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransactionHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransactionHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransactionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransactionHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TransactionHistory mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uint64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uint64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uint64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uint64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocal queries the local edge of a User.
func (c *UserClient) QueryLocal(u *User) *LocalQuery {
	query := (&LocalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(local.Table, local.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.LocalTable, user.LocalColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoogle queries the google edge of a User.
func (c *UserClient) QueryGoogle(u *User) *GoogleQuery {
	query := (&GoogleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(google.Table, google.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.GoogleTable, user.GoogleColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Google, Local, TransactionHistory, User []ent.Hook
	}
	inters struct {
		Google, Local, TransactionHistory, User []ent.Interceptor
	}
)
