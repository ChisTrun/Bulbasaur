// Code generated by ent, DO NOT EDIT.

package google

import (
	"bulbasaur/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Google {
	return predicate.Google(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Google {
	return predicate.Google(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Google {
	return predicate.Google(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Google {
	return predicate.Google(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Google {
	return predicate.Google(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Google {
	return predicate.Google(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Google {
	return predicate.Google(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldTenantID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldUserID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldEmail, v))
}

// Fullname applies equality check predicate on the "fullname" field. It's identical to FullnameEQ.
func Fullname(v string) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldFullname, v))
}

// AvatarPath applies equality check predicate on the "avatarPath" field. It's identical to AvatarPathEQ.
func AvatarPath(v string) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldAvatarPath, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Google {
	return predicate.Google(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Google {
	return predicate.Google(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Google {
	return predicate.Google(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Google {
	return predicate.Google(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Google {
	return predicate.Google(sql.FieldLTE(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Google {
	return predicate.Google(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Google {
	return predicate.Google(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Google {
	return predicate.Google(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Google {
	return predicate.Google(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Google {
	return predicate.Google(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Google {
	return predicate.Google(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Google {
	return predicate.Google(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Google {
	return predicate.Google(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Google {
	return predicate.Google(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Google {
	return predicate.Google(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Google {
	return predicate.Google(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Google {
	return predicate.Google(sql.FieldContainsFold(FieldTenantID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.Google {
	return predicate.Google(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.Google {
	return predicate.Google(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.Google {
	return predicate.Google(sql.FieldNotIn(FieldUserID, vs...))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Google {
	return predicate.Google(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Google {
	return predicate.Google(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Google {
	return predicate.Google(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Google {
	return predicate.Google(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Google {
	return predicate.Google(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Google {
	return predicate.Google(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Google {
	return predicate.Google(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Google {
	return predicate.Google(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Google {
	return predicate.Google(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Google {
	return predicate.Google(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Google {
	return predicate.Google(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Google {
	return predicate.Google(sql.FieldContainsFold(FieldEmail, v))
}

// FullnameEQ applies the EQ predicate on the "fullname" field.
func FullnameEQ(v string) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldFullname, v))
}

// FullnameNEQ applies the NEQ predicate on the "fullname" field.
func FullnameNEQ(v string) predicate.Google {
	return predicate.Google(sql.FieldNEQ(FieldFullname, v))
}

// FullnameIn applies the In predicate on the "fullname" field.
func FullnameIn(vs ...string) predicate.Google {
	return predicate.Google(sql.FieldIn(FieldFullname, vs...))
}

// FullnameNotIn applies the NotIn predicate on the "fullname" field.
func FullnameNotIn(vs ...string) predicate.Google {
	return predicate.Google(sql.FieldNotIn(FieldFullname, vs...))
}

// FullnameGT applies the GT predicate on the "fullname" field.
func FullnameGT(v string) predicate.Google {
	return predicate.Google(sql.FieldGT(FieldFullname, v))
}

// FullnameGTE applies the GTE predicate on the "fullname" field.
func FullnameGTE(v string) predicate.Google {
	return predicate.Google(sql.FieldGTE(FieldFullname, v))
}

// FullnameLT applies the LT predicate on the "fullname" field.
func FullnameLT(v string) predicate.Google {
	return predicate.Google(sql.FieldLT(FieldFullname, v))
}

// FullnameLTE applies the LTE predicate on the "fullname" field.
func FullnameLTE(v string) predicate.Google {
	return predicate.Google(sql.FieldLTE(FieldFullname, v))
}

// FullnameContains applies the Contains predicate on the "fullname" field.
func FullnameContains(v string) predicate.Google {
	return predicate.Google(sql.FieldContains(FieldFullname, v))
}

// FullnameHasPrefix applies the HasPrefix predicate on the "fullname" field.
func FullnameHasPrefix(v string) predicate.Google {
	return predicate.Google(sql.FieldHasPrefix(FieldFullname, v))
}

// FullnameHasSuffix applies the HasSuffix predicate on the "fullname" field.
func FullnameHasSuffix(v string) predicate.Google {
	return predicate.Google(sql.FieldHasSuffix(FieldFullname, v))
}

// FullnameIsNil applies the IsNil predicate on the "fullname" field.
func FullnameIsNil() predicate.Google {
	return predicate.Google(sql.FieldIsNull(FieldFullname))
}

// FullnameNotNil applies the NotNil predicate on the "fullname" field.
func FullnameNotNil() predicate.Google {
	return predicate.Google(sql.FieldNotNull(FieldFullname))
}

// FullnameEqualFold applies the EqualFold predicate on the "fullname" field.
func FullnameEqualFold(v string) predicate.Google {
	return predicate.Google(sql.FieldEqualFold(FieldFullname, v))
}

// FullnameContainsFold applies the ContainsFold predicate on the "fullname" field.
func FullnameContainsFold(v string) predicate.Google {
	return predicate.Google(sql.FieldContainsFold(FieldFullname, v))
}

// AvatarPathEQ applies the EQ predicate on the "avatarPath" field.
func AvatarPathEQ(v string) predicate.Google {
	return predicate.Google(sql.FieldEQ(FieldAvatarPath, v))
}

// AvatarPathNEQ applies the NEQ predicate on the "avatarPath" field.
func AvatarPathNEQ(v string) predicate.Google {
	return predicate.Google(sql.FieldNEQ(FieldAvatarPath, v))
}

// AvatarPathIn applies the In predicate on the "avatarPath" field.
func AvatarPathIn(vs ...string) predicate.Google {
	return predicate.Google(sql.FieldIn(FieldAvatarPath, vs...))
}

// AvatarPathNotIn applies the NotIn predicate on the "avatarPath" field.
func AvatarPathNotIn(vs ...string) predicate.Google {
	return predicate.Google(sql.FieldNotIn(FieldAvatarPath, vs...))
}

// AvatarPathGT applies the GT predicate on the "avatarPath" field.
func AvatarPathGT(v string) predicate.Google {
	return predicate.Google(sql.FieldGT(FieldAvatarPath, v))
}

// AvatarPathGTE applies the GTE predicate on the "avatarPath" field.
func AvatarPathGTE(v string) predicate.Google {
	return predicate.Google(sql.FieldGTE(FieldAvatarPath, v))
}

// AvatarPathLT applies the LT predicate on the "avatarPath" field.
func AvatarPathLT(v string) predicate.Google {
	return predicate.Google(sql.FieldLT(FieldAvatarPath, v))
}

// AvatarPathLTE applies the LTE predicate on the "avatarPath" field.
func AvatarPathLTE(v string) predicate.Google {
	return predicate.Google(sql.FieldLTE(FieldAvatarPath, v))
}

// AvatarPathContains applies the Contains predicate on the "avatarPath" field.
func AvatarPathContains(v string) predicate.Google {
	return predicate.Google(sql.FieldContains(FieldAvatarPath, v))
}

// AvatarPathHasPrefix applies the HasPrefix predicate on the "avatarPath" field.
func AvatarPathHasPrefix(v string) predicate.Google {
	return predicate.Google(sql.FieldHasPrefix(FieldAvatarPath, v))
}

// AvatarPathHasSuffix applies the HasSuffix predicate on the "avatarPath" field.
func AvatarPathHasSuffix(v string) predicate.Google {
	return predicate.Google(sql.FieldHasSuffix(FieldAvatarPath, v))
}

// AvatarPathIsNil applies the IsNil predicate on the "avatarPath" field.
func AvatarPathIsNil() predicate.Google {
	return predicate.Google(sql.FieldIsNull(FieldAvatarPath))
}

// AvatarPathNotNil applies the NotNil predicate on the "avatarPath" field.
func AvatarPathNotNil() predicate.Google {
	return predicate.Google(sql.FieldNotNull(FieldAvatarPath))
}

// AvatarPathEqualFold applies the EqualFold predicate on the "avatarPath" field.
func AvatarPathEqualFold(v string) predicate.Google {
	return predicate.Google(sql.FieldEqualFold(FieldAvatarPath, v))
}

// AvatarPathContainsFold applies the ContainsFold predicate on the "avatarPath" field.
func AvatarPathContainsFold(v string) predicate.Google {
	return predicate.Google(sql.FieldContainsFold(FieldAvatarPath, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Google {
	return predicate.Google(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Google {
	return predicate.Google(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Google) predicate.Google {
	return predicate.Google(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Google) predicate.Google {
	return predicate.Google(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Google) predicate.Google {
	return predicate.Google(sql.NotPredicates(p))
}
