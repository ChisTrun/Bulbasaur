// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldSafeID holds the string denoting the safe_id field in the database.
	FieldSafeID = "safe_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldLastSignedIn holds the string denoting the last_signed_in field in the database.
	FieldLastSignedIn = "last_signed_in"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeLocal holds the string denoting the local edge name in mutations.
	EdgeLocal = "local"
	// EdgeGoogle holds the string denoting the google edge name in mutations.
	EdgeGoogle = "google"
	// Table holds the table name of the user in the database.
	Table = "users"
	// LocalTable is the table that holds the local relation/edge.
	LocalTable = "locals"
	// LocalInverseTable is the table name for the Local entity.
	// It exists in this package in order to avoid circular dependency with the "local" package.
	LocalInverseTable = "locals"
	// LocalColumn is the table column denoting the local relation/edge.
	LocalColumn = "user_id"
	// GoogleTable is the table that holds the google relation/edge.
	GoogleTable = "googles"
	// GoogleInverseTable is the table name for the Google entity.
	// It exists in this package in order to avoid circular dependency with the "google" package.
	GoogleInverseTable = "googles"
	// GoogleColumn is the table column denoting the google relation/edge.
	GoogleColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTenantID,
	FieldSafeID,
	FieldEmail,
	FieldMetadata,
	FieldLastSignedIn,
	FieldRole,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSafeID holds the default value on creation for the "safe_id" field.
	DefaultSafeID string
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// BySafeID orders the results by the safe_id field.
func BySafeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSafeID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByLastSignedIn orders the results by the last_signed_in field.
func ByLastSignedIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSignedIn, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByLocalField orders the results by local field.
func ByLocalField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocalStep(), sql.OrderByField(field, opts...))
	}
}

// ByGoogleField orders the results by google field.
func ByGoogleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGoogleStep(), sql.OrderByField(field, opts...))
	}
}
func newLocalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, LocalTable, LocalColumn),
	)
}
func newGoogleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GoogleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, GoogleTable, GoogleColumn),
	)
}
