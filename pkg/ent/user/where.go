// Code generated by ent, DO NOT EDIT.

package user

import (
	bulbasaur "bulbasaur/api"
	"bulbasaur/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenantID, v))
}

// SafeID applies equality check predicate on the "safe_id" field. It's identical to SafeIDEQ.
func SafeID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSafeID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// LastSignedIn applies equality check predicate on the "last_signed_in" field. It's identical to LastSignedInEQ.
func LastSignedIn(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastSignedIn, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v bulbasaur.Role) predicate.User {
	vc := int32(v)
	return predicate.User(sql.FieldEQ(FieldRole, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTenantID, v))
}

// SafeIDEQ applies the EQ predicate on the "safe_id" field.
func SafeIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSafeID, v))
}

// SafeIDNEQ applies the NEQ predicate on the "safe_id" field.
func SafeIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSafeID, v))
}

// SafeIDIn applies the In predicate on the "safe_id" field.
func SafeIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSafeID, vs...))
}

// SafeIDNotIn applies the NotIn predicate on the "safe_id" field.
func SafeIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSafeID, vs...))
}

// SafeIDGT applies the GT predicate on the "safe_id" field.
func SafeIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSafeID, v))
}

// SafeIDGTE applies the GTE predicate on the "safe_id" field.
func SafeIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSafeID, v))
}

// SafeIDLT applies the LT predicate on the "safe_id" field.
func SafeIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSafeID, v))
}

// SafeIDLTE applies the LTE predicate on the "safe_id" field.
func SafeIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSafeID, v))
}

// SafeIDContains applies the Contains predicate on the "safe_id" field.
func SafeIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSafeID, v))
}

// SafeIDHasPrefix applies the HasPrefix predicate on the "safe_id" field.
func SafeIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSafeID, v))
}

// SafeIDHasSuffix applies the HasSuffix predicate on the "safe_id" field.
func SafeIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSafeID, v))
}

// SafeIDEqualFold applies the EqualFold predicate on the "safe_id" field.
func SafeIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSafeID, v))
}

// SafeIDContainsFold applies the ContainsFold predicate on the "safe_id" field.
func SafeIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSafeID, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldMetadata))
}

// LastSignedInEQ applies the EQ predicate on the "last_signed_in" field.
func LastSignedInEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastSignedIn, v))
}

// LastSignedInNEQ applies the NEQ predicate on the "last_signed_in" field.
func LastSignedInNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastSignedIn, v))
}

// LastSignedInIn applies the In predicate on the "last_signed_in" field.
func LastSignedInIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastSignedIn, vs...))
}

// LastSignedInNotIn applies the NotIn predicate on the "last_signed_in" field.
func LastSignedInNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastSignedIn, vs...))
}

// LastSignedInGT applies the GT predicate on the "last_signed_in" field.
func LastSignedInGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastSignedIn, v))
}

// LastSignedInGTE applies the GTE predicate on the "last_signed_in" field.
func LastSignedInGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastSignedIn, v))
}

// LastSignedInLT applies the LT predicate on the "last_signed_in" field.
func LastSignedInLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastSignedIn, v))
}

// LastSignedInLTE applies the LTE predicate on the "last_signed_in" field.
func LastSignedInLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastSignedIn, v))
}

// LastSignedInIsNil applies the IsNil predicate on the "last_signed_in" field.
func LastSignedInIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastSignedIn))
}

// LastSignedInNotNil applies the NotNil predicate on the "last_signed_in" field.
func LastSignedInNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastSignedIn))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v bulbasaur.Role) predicate.User {
	vc := int32(v)
	return predicate.User(sql.FieldEQ(FieldRole, vc))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v bulbasaur.Role) predicate.User {
	vc := int32(v)
	return predicate.User(sql.FieldNEQ(FieldRole, vc))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...bulbasaur.Role) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.User(sql.FieldIn(FieldRole, v...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...bulbasaur.Role) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.User(sql.FieldNotIn(FieldRole, v...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v bulbasaur.Role) predicate.User {
	vc := int32(v)
	return predicate.User(sql.FieldGT(FieldRole, vc))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v bulbasaur.Role) predicate.User {
	vc := int32(v)
	return predicate.User(sql.FieldGTE(FieldRole, vc))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v bulbasaur.Role) predicate.User {
	vc := int32(v)
	return predicate.User(sql.FieldLT(FieldRole, vc))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v bulbasaur.Role) predicate.User {
	vc := int32(v)
	return predicate.User(sql.FieldLTE(FieldRole, vc))
}

// HasLocal applies the HasEdge predicate on the "local" edge.
func HasLocal() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, LocalTable, LocalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocalWith applies the HasEdge predicate on the "local" edge with a given conditions (other predicates).
func HasLocalWith(preds ...predicate.Local) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLocalStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGoogle applies the HasEdge predicate on the "google" edge.
func HasGoogle() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, GoogleTable, GoogleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGoogleWith applies the HasEdge predicate on the "google" edge with a given conditions (other predicates).
func HasGoogleWith(preds ...predicate.Google) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGoogleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
