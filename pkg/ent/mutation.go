// Code generated by ent, DO NOT EDIT.

package ent

import (
	bulbasaur "bulbasaur/api"
	"bulbasaur/pkg/ent/google"
	"bulbasaur/pkg/ent/local"
	"bulbasaur/pkg/ent/predicate"
	"bulbasaur/pkg/ent/user"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGoogle = "Google"
	TypeLocal  = "Local"
	TypeUser   = "User"
)

// GoogleMutation represents an operation that mutates the Google nodes in the graph.
type GoogleMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	tenant_id     *string
	email         *string
	fullname      *string
	avatarPath    *string
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Google, error)
	predicates    []predicate.Google
}

var _ ent.Mutation = (*GoogleMutation)(nil)

// googleOption allows management of the mutation configuration using functional options.
type googleOption func(*GoogleMutation)

// newGoogleMutation creates new mutation for the Google entity.
func newGoogleMutation(c config, op Op, opts ...googleOption) *GoogleMutation {
	m := &GoogleMutation{
		config:        c,
		op:            op,
		typ:           TypeGoogle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoogleID sets the ID field of the mutation.
func withGoogleID(id uint64) googleOption {
	return func(m *GoogleMutation) {
		var (
			err   error
			once  sync.Once
			value *Google
		)
		m.oldValue = func(ctx context.Context) (*Google, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Google.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoogle sets the old Google of the mutation.
func withGoogle(node *Google) googleOption {
	return func(m *GoogleMutation) {
		m.oldValue = func(context.Context) (*Google, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoogleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoogleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Google entities.
func (m *GoogleMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoogleMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GoogleMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Google.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GoogleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GoogleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Google entity.
// If the Google object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoogleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GoogleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GoogleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GoogleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Google entity.
// If the Google object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoogleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GoogleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTenantID sets the "tenant_id" field.
func (m *GoogleMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *GoogleMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Google entity.
// If the Google object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoogleMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *GoogleMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetUserID sets the "user_id" field.
func (m *GoogleMutation) SetUserID(u uint64) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GoogleMutation) UserID() (r uint64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Google entity.
// If the Google object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoogleMutation) OldUserID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GoogleMutation) ResetUserID() {
	m.user = nil
}

// SetEmail sets the "email" field.
func (m *GoogleMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *GoogleMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Google entity.
// If the Google object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoogleMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *GoogleMutation) ResetEmail() {
	m.email = nil
}

// SetFullname sets the "fullname" field.
func (m *GoogleMutation) SetFullname(s string) {
	m.fullname = &s
}

// Fullname returns the value of the "fullname" field in the mutation.
func (m *GoogleMutation) Fullname() (r string, exists bool) {
	v := m.fullname
	if v == nil {
		return
	}
	return *v, true
}

// OldFullname returns the old "fullname" field's value of the Google entity.
// If the Google object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoogleMutation) OldFullname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullname: %w", err)
	}
	return oldValue.Fullname, nil
}

// ClearFullname clears the value of the "fullname" field.
func (m *GoogleMutation) ClearFullname() {
	m.fullname = nil
	m.clearedFields[google.FieldFullname] = struct{}{}
}

// FullnameCleared returns if the "fullname" field was cleared in this mutation.
func (m *GoogleMutation) FullnameCleared() bool {
	_, ok := m.clearedFields[google.FieldFullname]
	return ok
}

// ResetFullname resets all changes to the "fullname" field.
func (m *GoogleMutation) ResetFullname() {
	m.fullname = nil
	delete(m.clearedFields, google.FieldFullname)
}

// SetAvatarPath sets the "avatarPath" field.
func (m *GoogleMutation) SetAvatarPath(s string) {
	m.avatarPath = &s
}

// AvatarPath returns the value of the "avatarPath" field in the mutation.
func (m *GoogleMutation) AvatarPath() (r string, exists bool) {
	v := m.avatarPath
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarPath returns the old "avatarPath" field's value of the Google entity.
// If the Google object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoogleMutation) OldAvatarPath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarPath: %w", err)
	}
	return oldValue.AvatarPath, nil
}

// ClearAvatarPath clears the value of the "avatarPath" field.
func (m *GoogleMutation) ClearAvatarPath() {
	m.avatarPath = nil
	m.clearedFields[google.FieldAvatarPath] = struct{}{}
}

// AvatarPathCleared returns if the "avatarPath" field was cleared in this mutation.
func (m *GoogleMutation) AvatarPathCleared() bool {
	_, ok := m.clearedFields[google.FieldAvatarPath]
	return ok
}

// ResetAvatarPath resets all changes to the "avatarPath" field.
func (m *GoogleMutation) ResetAvatarPath() {
	m.avatarPath = nil
	delete(m.clearedFields, google.FieldAvatarPath)
}

// ClearUser clears the "user" edge to the User entity.
func (m *GoogleMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[google.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GoogleMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GoogleMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GoogleMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the GoogleMutation builder.
func (m *GoogleMutation) Where(ps ...predicate.Google) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GoogleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GoogleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Google, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GoogleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GoogleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Google).
func (m *GoogleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoogleMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, google.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, google.FieldUpdatedAt)
	}
	if m.tenant_id != nil {
		fields = append(fields, google.FieldTenantID)
	}
	if m.user != nil {
		fields = append(fields, google.FieldUserID)
	}
	if m.email != nil {
		fields = append(fields, google.FieldEmail)
	}
	if m.fullname != nil {
		fields = append(fields, google.FieldFullname)
	}
	if m.avatarPath != nil {
		fields = append(fields, google.FieldAvatarPath)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoogleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case google.FieldCreatedAt:
		return m.CreatedAt()
	case google.FieldUpdatedAt:
		return m.UpdatedAt()
	case google.FieldTenantID:
		return m.TenantID()
	case google.FieldUserID:
		return m.UserID()
	case google.FieldEmail:
		return m.Email()
	case google.FieldFullname:
		return m.Fullname()
	case google.FieldAvatarPath:
		return m.AvatarPath()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoogleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case google.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case google.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case google.FieldTenantID:
		return m.OldTenantID(ctx)
	case google.FieldUserID:
		return m.OldUserID(ctx)
	case google.FieldEmail:
		return m.OldEmail(ctx)
	case google.FieldFullname:
		return m.OldFullname(ctx)
	case google.FieldAvatarPath:
		return m.OldAvatarPath(ctx)
	}
	return nil, fmt.Errorf("unknown Google field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoogleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case google.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case google.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case google.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case google.FieldUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case google.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case google.FieldFullname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullname(v)
		return nil
	case google.FieldAvatarPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarPath(v)
		return nil
	}
	return fmt.Errorf("unknown Google field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoogleMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoogleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoogleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Google numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoogleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(google.FieldFullname) {
		fields = append(fields, google.FieldFullname)
	}
	if m.FieldCleared(google.FieldAvatarPath) {
		fields = append(fields, google.FieldAvatarPath)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoogleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoogleMutation) ClearField(name string) error {
	switch name {
	case google.FieldFullname:
		m.ClearFullname()
		return nil
	case google.FieldAvatarPath:
		m.ClearAvatarPath()
		return nil
	}
	return fmt.Errorf("unknown Google nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoogleMutation) ResetField(name string) error {
	switch name {
	case google.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case google.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case google.FieldTenantID:
		m.ResetTenantID()
		return nil
	case google.FieldUserID:
		m.ResetUserID()
		return nil
	case google.FieldEmail:
		m.ResetEmail()
		return nil
	case google.FieldFullname:
		m.ResetFullname()
		return nil
	case google.FieldAvatarPath:
		m.ResetAvatarPath()
		return nil
	}
	return fmt.Errorf("unknown Google field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoogleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, google.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoogleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case google.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoogleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoogleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoogleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, google.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoogleMutation) EdgeCleared(name string) bool {
	switch name {
	case google.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoogleMutation) ClearEdge(name string) error {
	switch name {
	case google.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Google unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoogleMutation) ResetEdge(name string) error {
	switch name {
	case google.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Google edge %s", name)
}

// LocalMutation represents an operation that mutates the Local nodes in the graph.
type LocalMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	tenant_id     *string
	username      *string
	password      *string
	fullname      *string
	company       *string
	country       *string
	jobTitle      *string
	avatarPath    *string
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Local, error)
	predicates    []predicate.Local
}

var _ ent.Mutation = (*LocalMutation)(nil)

// localOption allows management of the mutation configuration using functional options.
type localOption func(*LocalMutation)

// newLocalMutation creates new mutation for the Local entity.
func newLocalMutation(c config, op Op, opts ...localOption) *LocalMutation {
	m := &LocalMutation{
		config:        c,
		op:            op,
		typ:           TypeLocal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLocalID sets the ID field of the mutation.
func withLocalID(id uint64) localOption {
	return func(m *LocalMutation) {
		var (
			err   error
			once  sync.Once
			value *Local
		)
		m.oldValue = func(ctx context.Context) (*Local, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Local.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLocal sets the old Local of the mutation.
func withLocal(node *Local) localOption {
	return func(m *LocalMutation) {
		m.oldValue = func(context.Context) (*Local, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LocalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LocalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Local entities.
func (m *LocalMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LocalMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LocalMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Local.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *LocalMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LocalMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LocalMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LocalMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LocalMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LocalMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTenantID sets the "tenant_id" field.
func (m *LocalMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *LocalMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *LocalMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetUserID sets the "user_id" field.
func (m *LocalMutation) SetUserID(u uint64) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *LocalMutation) UserID() (r uint64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldUserID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *LocalMutation) ResetUserID() {
	m.user = nil
}

// SetUsername sets the "username" field.
func (m *LocalMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *LocalMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *LocalMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[local.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *LocalMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[local.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *LocalMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, local.FieldUsername)
}

// SetPassword sets the "password" field.
func (m *LocalMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *LocalMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *LocalMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[local.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *LocalMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[local.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *LocalMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, local.FieldPassword)
}

// SetFullname sets the "fullname" field.
func (m *LocalMutation) SetFullname(s string) {
	m.fullname = &s
}

// Fullname returns the value of the "fullname" field in the mutation.
func (m *LocalMutation) Fullname() (r string, exists bool) {
	v := m.fullname
	if v == nil {
		return
	}
	return *v, true
}

// OldFullname returns the old "fullname" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldFullname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullname: %w", err)
	}
	return oldValue.Fullname, nil
}

// ClearFullname clears the value of the "fullname" field.
func (m *LocalMutation) ClearFullname() {
	m.fullname = nil
	m.clearedFields[local.FieldFullname] = struct{}{}
}

// FullnameCleared returns if the "fullname" field was cleared in this mutation.
func (m *LocalMutation) FullnameCleared() bool {
	_, ok := m.clearedFields[local.FieldFullname]
	return ok
}

// ResetFullname resets all changes to the "fullname" field.
func (m *LocalMutation) ResetFullname() {
	m.fullname = nil
	delete(m.clearedFields, local.FieldFullname)
}

// SetCompany sets the "company" field.
func (m *LocalMutation) SetCompany(s string) {
	m.company = &s
}

// Company returns the value of the "company" field in the mutation.
func (m *LocalMutation) Company() (r string, exists bool) {
	v := m.company
	if v == nil {
		return
	}
	return *v, true
}

// OldCompany returns the old "company" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldCompany(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompany is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompany requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompany: %w", err)
	}
	return oldValue.Company, nil
}

// ClearCompany clears the value of the "company" field.
func (m *LocalMutation) ClearCompany() {
	m.company = nil
	m.clearedFields[local.FieldCompany] = struct{}{}
}

// CompanyCleared returns if the "company" field was cleared in this mutation.
func (m *LocalMutation) CompanyCleared() bool {
	_, ok := m.clearedFields[local.FieldCompany]
	return ok
}

// ResetCompany resets all changes to the "company" field.
func (m *LocalMutation) ResetCompany() {
	m.company = nil
	delete(m.clearedFields, local.FieldCompany)
}

// SetCountry sets the "country" field.
func (m *LocalMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *LocalMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ClearCountry clears the value of the "country" field.
func (m *LocalMutation) ClearCountry() {
	m.country = nil
	m.clearedFields[local.FieldCountry] = struct{}{}
}

// CountryCleared returns if the "country" field was cleared in this mutation.
func (m *LocalMutation) CountryCleared() bool {
	_, ok := m.clearedFields[local.FieldCountry]
	return ok
}

// ResetCountry resets all changes to the "country" field.
func (m *LocalMutation) ResetCountry() {
	m.country = nil
	delete(m.clearedFields, local.FieldCountry)
}

// SetJobTitle sets the "jobTitle" field.
func (m *LocalMutation) SetJobTitle(s string) {
	m.jobTitle = &s
}

// JobTitle returns the value of the "jobTitle" field in the mutation.
func (m *LocalMutation) JobTitle() (r string, exists bool) {
	v := m.jobTitle
	if v == nil {
		return
	}
	return *v, true
}

// OldJobTitle returns the old "jobTitle" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldJobTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobTitle: %w", err)
	}
	return oldValue.JobTitle, nil
}

// ClearJobTitle clears the value of the "jobTitle" field.
func (m *LocalMutation) ClearJobTitle() {
	m.jobTitle = nil
	m.clearedFields[local.FieldJobTitle] = struct{}{}
}

// JobTitleCleared returns if the "jobTitle" field was cleared in this mutation.
func (m *LocalMutation) JobTitleCleared() bool {
	_, ok := m.clearedFields[local.FieldJobTitle]
	return ok
}

// ResetJobTitle resets all changes to the "jobTitle" field.
func (m *LocalMutation) ResetJobTitle() {
	m.jobTitle = nil
	delete(m.clearedFields, local.FieldJobTitle)
}

// SetAvatarPath sets the "avatarPath" field.
func (m *LocalMutation) SetAvatarPath(s string) {
	m.avatarPath = &s
}

// AvatarPath returns the value of the "avatarPath" field in the mutation.
func (m *LocalMutation) AvatarPath() (r string, exists bool) {
	v := m.avatarPath
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarPath returns the old "avatarPath" field's value of the Local entity.
// If the Local object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalMutation) OldAvatarPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarPath: %w", err)
	}
	return oldValue.AvatarPath, nil
}

// ClearAvatarPath clears the value of the "avatarPath" field.
func (m *LocalMutation) ClearAvatarPath() {
	m.avatarPath = nil
	m.clearedFields[local.FieldAvatarPath] = struct{}{}
}

// AvatarPathCleared returns if the "avatarPath" field was cleared in this mutation.
func (m *LocalMutation) AvatarPathCleared() bool {
	_, ok := m.clearedFields[local.FieldAvatarPath]
	return ok
}

// ResetAvatarPath resets all changes to the "avatarPath" field.
func (m *LocalMutation) ResetAvatarPath() {
	m.avatarPath = nil
	delete(m.clearedFields, local.FieldAvatarPath)
}

// ClearUser clears the "user" edge to the User entity.
func (m *LocalMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[local.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *LocalMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *LocalMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LocalMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the LocalMutation builder.
func (m *LocalMutation) Where(ps ...predicate.Local) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LocalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LocalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Local, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LocalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LocalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Local).
func (m *LocalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LocalMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, local.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, local.FieldUpdatedAt)
	}
	if m.tenant_id != nil {
		fields = append(fields, local.FieldTenantID)
	}
	if m.user != nil {
		fields = append(fields, local.FieldUserID)
	}
	if m.username != nil {
		fields = append(fields, local.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, local.FieldPassword)
	}
	if m.fullname != nil {
		fields = append(fields, local.FieldFullname)
	}
	if m.company != nil {
		fields = append(fields, local.FieldCompany)
	}
	if m.country != nil {
		fields = append(fields, local.FieldCountry)
	}
	if m.jobTitle != nil {
		fields = append(fields, local.FieldJobTitle)
	}
	if m.avatarPath != nil {
		fields = append(fields, local.FieldAvatarPath)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LocalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case local.FieldCreatedAt:
		return m.CreatedAt()
	case local.FieldUpdatedAt:
		return m.UpdatedAt()
	case local.FieldTenantID:
		return m.TenantID()
	case local.FieldUserID:
		return m.UserID()
	case local.FieldUsername:
		return m.Username()
	case local.FieldPassword:
		return m.Password()
	case local.FieldFullname:
		return m.Fullname()
	case local.FieldCompany:
		return m.Company()
	case local.FieldCountry:
		return m.Country()
	case local.FieldJobTitle:
		return m.JobTitle()
	case local.FieldAvatarPath:
		return m.AvatarPath()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LocalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case local.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case local.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case local.FieldTenantID:
		return m.OldTenantID(ctx)
	case local.FieldUserID:
		return m.OldUserID(ctx)
	case local.FieldUsername:
		return m.OldUsername(ctx)
	case local.FieldPassword:
		return m.OldPassword(ctx)
	case local.FieldFullname:
		return m.OldFullname(ctx)
	case local.FieldCompany:
		return m.OldCompany(ctx)
	case local.FieldCountry:
		return m.OldCountry(ctx)
	case local.FieldJobTitle:
		return m.OldJobTitle(ctx)
	case local.FieldAvatarPath:
		return m.OldAvatarPath(ctx)
	}
	return nil, fmt.Errorf("unknown Local field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case local.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case local.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case local.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case local.FieldUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case local.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case local.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case local.FieldFullname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullname(v)
		return nil
	case local.FieldCompany:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompany(v)
		return nil
	case local.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case local.FieldJobTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobTitle(v)
		return nil
	case local.FieldAvatarPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarPath(v)
		return nil
	}
	return fmt.Errorf("unknown Local field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LocalMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LocalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Local numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LocalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(local.FieldUsername) {
		fields = append(fields, local.FieldUsername)
	}
	if m.FieldCleared(local.FieldPassword) {
		fields = append(fields, local.FieldPassword)
	}
	if m.FieldCleared(local.FieldFullname) {
		fields = append(fields, local.FieldFullname)
	}
	if m.FieldCleared(local.FieldCompany) {
		fields = append(fields, local.FieldCompany)
	}
	if m.FieldCleared(local.FieldCountry) {
		fields = append(fields, local.FieldCountry)
	}
	if m.FieldCleared(local.FieldJobTitle) {
		fields = append(fields, local.FieldJobTitle)
	}
	if m.FieldCleared(local.FieldAvatarPath) {
		fields = append(fields, local.FieldAvatarPath)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LocalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LocalMutation) ClearField(name string) error {
	switch name {
	case local.FieldUsername:
		m.ClearUsername()
		return nil
	case local.FieldPassword:
		m.ClearPassword()
		return nil
	case local.FieldFullname:
		m.ClearFullname()
		return nil
	case local.FieldCompany:
		m.ClearCompany()
		return nil
	case local.FieldCountry:
		m.ClearCountry()
		return nil
	case local.FieldJobTitle:
		m.ClearJobTitle()
		return nil
	case local.FieldAvatarPath:
		m.ClearAvatarPath()
		return nil
	}
	return fmt.Errorf("unknown Local nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LocalMutation) ResetField(name string) error {
	switch name {
	case local.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case local.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case local.FieldTenantID:
		m.ResetTenantID()
		return nil
	case local.FieldUserID:
		m.ResetUserID()
		return nil
	case local.FieldUsername:
		m.ResetUsername()
		return nil
	case local.FieldPassword:
		m.ResetPassword()
		return nil
	case local.FieldFullname:
		m.ResetFullname()
		return nil
	case local.FieldCompany:
		m.ResetCompany()
		return nil
	case local.FieldCountry:
		m.ResetCountry()
		return nil
	case local.FieldJobTitle:
		m.ResetJobTitle()
		return nil
	case local.FieldAvatarPath:
		m.ResetAvatarPath()
		return nil
	}
	return fmt.Errorf("unknown Local field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LocalMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, local.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LocalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case local.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LocalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LocalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LocalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, local.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LocalMutation) EdgeCleared(name string) bool {
	switch name {
	case local.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LocalMutation) ClearEdge(name string) error {
	switch name {
	case local.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Local unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LocalMutation) ResetEdge(name string) error {
	switch name {
	case local.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Local edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	created_at     *time.Time
	updated_at     *time.Time
	tenant_id      *string
	safe_id        *string
	email          *string
	metadata       *string
	last_signed_in *time.Time
	role           *bulbasaur.Role
	addrole        *bulbasaur.Role
	clearedFields  map[string]struct{}
	local          *uint64
	clearedlocal   bool
	google         *uint64
	clearedgoogle  bool
	done           bool
	oldValue       func(context.Context) (*User, error)
	predicates     []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTenantID sets the "tenant_id" field.
func (m *UserMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *UserMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *UserMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetSafeID sets the "safe_id" field.
func (m *UserMutation) SetSafeID(s string) {
	m.safe_id = &s
}

// SafeID returns the value of the "safe_id" field in the mutation.
func (m *UserMutation) SafeID() (r string, exists bool) {
	v := m.safe_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSafeID returns the old "safe_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSafeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSafeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSafeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSafeID: %w", err)
	}
	return oldValue.SafeID, nil
}

// ResetSafeID resets all changes to the "safe_id" field.
func (m *UserMutation) ResetSafeID() {
	m.safe_id = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetMetadata sets the "metadata" field.
func (m *UserMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *UserMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMetadata(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *UserMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[user.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *UserMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[user.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *UserMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, user.FieldMetadata)
}

// SetLastSignedIn sets the "last_signed_in" field.
func (m *UserMutation) SetLastSignedIn(t time.Time) {
	m.last_signed_in = &t
}

// LastSignedIn returns the value of the "last_signed_in" field in the mutation.
func (m *UserMutation) LastSignedIn() (r time.Time, exists bool) {
	v := m.last_signed_in
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSignedIn returns the old "last_signed_in" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastSignedIn(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSignedIn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSignedIn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSignedIn: %w", err)
	}
	return oldValue.LastSignedIn, nil
}

// ClearLastSignedIn clears the value of the "last_signed_in" field.
func (m *UserMutation) ClearLastSignedIn() {
	m.last_signed_in = nil
	m.clearedFields[user.FieldLastSignedIn] = struct{}{}
}

// LastSignedInCleared returns if the "last_signed_in" field was cleared in this mutation.
func (m *UserMutation) LastSignedInCleared() bool {
	_, ok := m.clearedFields[user.FieldLastSignedIn]
	return ok
}

// ResetLastSignedIn resets all changes to the "last_signed_in" field.
func (m *UserMutation) ResetLastSignedIn() {
	m.last_signed_in = nil
	delete(m.clearedFields, user.FieldLastSignedIn)
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(b bulbasaur.Role) {
	m.role = &b
	m.addrole = nil
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r bulbasaur.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v bulbasaur.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// AddRole adds b to the "role" field.
func (m *UserMutation) AddRole(b bulbasaur.Role) {
	if m.addrole != nil {
		*m.addrole += b
	} else {
		m.addrole = &b
	}
}

// AddedRole returns the value that was added to the "role" field in this mutation.
func (m *UserMutation) AddedRole() (r bulbasaur.Role, exists bool) {
	v := m.addrole
	if v == nil {
		return
	}
	return *v, true
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
	m.addrole = nil
}

// SetLocalID sets the "local" edge to the Local entity by id.
func (m *UserMutation) SetLocalID(id uint64) {
	m.local = &id
}

// ClearLocal clears the "local" edge to the Local entity.
func (m *UserMutation) ClearLocal() {
	m.clearedlocal = true
}

// LocalCleared reports if the "local" edge to the Local entity was cleared.
func (m *UserMutation) LocalCleared() bool {
	return m.clearedlocal
}

// LocalID returns the "local" edge ID in the mutation.
func (m *UserMutation) LocalID() (id uint64, exists bool) {
	if m.local != nil {
		return *m.local, true
	}
	return
}

// LocalIDs returns the "local" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LocalID instead. It exists only for internal usage by the builders.
func (m *UserMutation) LocalIDs() (ids []uint64) {
	if id := m.local; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLocal resets all changes to the "local" edge.
func (m *UserMutation) ResetLocal() {
	m.local = nil
	m.clearedlocal = false
}

// SetGoogleID sets the "google" edge to the Google entity by id.
func (m *UserMutation) SetGoogleID(id uint64) {
	m.google = &id
}

// ClearGoogle clears the "google" edge to the Google entity.
func (m *UserMutation) ClearGoogle() {
	m.clearedgoogle = true
}

// GoogleCleared reports if the "google" edge to the Google entity was cleared.
func (m *UserMutation) GoogleCleared() bool {
	return m.clearedgoogle
}

// GoogleID returns the "google" edge ID in the mutation.
func (m *UserMutation) GoogleID() (id uint64, exists bool) {
	if m.google != nil {
		return *m.google, true
	}
	return
}

// GoogleIDs returns the "google" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GoogleID instead. It exists only for internal usage by the builders.
func (m *UserMutation) GoogleIDs() (ids []uint64) {
	if id := m.google; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGoogle resets all changes to the "google" edge.
func (m *UserMutation) ResetGoogle() {
	m.google = nil
	m.clearedgoogle = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.tenant_id != nil {
		fields = append(fields, user.FieldTenantID)
	}
	if m.safe_id != nil {
		fields = append(fields, user.FieldSafeID)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.metadata != nil {
		fields = append(fields, user.FieldMetadata)
	}
	if m.last_signed_in != nil {
		fields = append(fields, user.FieldLastSignedIn)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldTenantID:
		return m.TenantID()
	case user.FieldSafeID:
		return m.SafeID()
	case user.FieldEmail:
		return m.Email()
	case user.FieldMetadata:
		return m.Metadata()
	case user.FieldLastSignedIn:
		return m.LastSignedIn()
	case user.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldTenantID:
		return m.OldTenantID(ctx)
	case user.FieldSafeID:
		return m.OldSafeID(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldMetadata:
		return m.OldMetadata(ctx)
	case user.FieldLastSignedIn:
		return m.OldLastSignedIn(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case user.FieldSafeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSafeID(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case user.FieldLastSignedIn:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSignedIn(v)
		return nil
	case user.FieldRole:
		v, ok := value.(bulbasaur.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addrole != nil {
		fields = append(fields, user.FieldRole)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldRole:
		return m.AddedRole()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldRole:
		v, ok := value.(bulbasaur.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRole(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldMetadata) {
		fields = append(fields, user.FieldMetadata)
	}
	if m.FieldCleared(user.FieldLastSignedIn) {
		fields = append(fields, user.FieldLastSignedIn)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldMetadata:
		m.ClearMetadata()
		return nil
	case user.FieldLastSignedIn:
		m.ClearLastSignedIn()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldTenantID:
		m.ResetTenantID()
		return nil
	case user.FieldSafeID:
		m.ResetSafeID()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldMetadata:
		m.ResetMetadata()
		return nil
	case user.FieldLastSignedIn:
		m.ResetLastSignedIn()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.local != nil {
		edges = append(edges, user.EdgeLocal)
	}
	if m.google != nil {
		edges = append(edges, user.EdgeGoogle)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeLocal:
		if id := m.local; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeGoogle:
		if id := m.google; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlocal {
		edges = append(edges, user.EdgeLocal)
	}
	if m.clearedgoogle {
		edges = append(edges, user.EdgeGoogle)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeLocal:
		return m.clearedlocal
	case user.EdgeGoogle:
		return m.clearedgoogle
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeLocal:
		m.ClearLocal()
		return nil
	case user.EdgeGoogle:
		m.ClearGoogle()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeLocal:
		m.ResetLocal()
		return nil
	case user.EdgeGoogle:
		m.ResetGoogle()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
