// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bulbasaur/pkg/ent/transactionhistory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionHistoryCreate is the builder for creating a TransactionHistory entity.
type TransactionHistoryCreate struct {
	config
	mutation *TransactionHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (thc *TransactionHistoryCreate) SetCreatedAt(t time.Time) *TransactionHistoryCreate {
	thc.mutation.SetCreatedAt(t)
	return thc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (thc *TransactionHistoryCreate) SetNillableCreatedAt(t *time.Time) *TransactionHistoryCreate {
	if t != nil {
		thc.SetCreatedAt(*t)
	}
	return thc
}

// SetUpdatedAt sets the "updated_at" field.
func (thc *TransactionHistoryCreate) SetUpdatedAt(t time.Time) *TransactionHistoryCreate {
	thc.mutation.SetUpdatedAt(t)
	return thc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (thc *TransactionHistoryCreate) SetNillableUpdatedAt(t *time.Time) *TransactionHistoryCreate {
	if t != nil {
		thc.SetUpdatedAt(*t)
	}
	return thc
}

// SetUserID sets the "user_id" field.
func (thc *TransactionHistoryCreate) SetUserID(u uint64) *TransactionHistoryCreate {
	thc.mutation.SetUserID(u)
	return thc
}

// SetAmount sets the "amount" field.
func (thc *TransactionHistoryCreate) SetAmount(f float64) *TransactionHistoryCreate {
	thc.mutation.SetAmount(f)
	return thc
}

// SetNote sets the "note" field.
func (thc *TransactionHistoryCreate) SetNote(s string) *TransactionHistoryCreate {
	thc.mutation.SetNote(s)
	return thc
}

// SetID sets the "id" field.
func (thc *TransactionHistoryCreate) SetID(u uint64) *TransactionHistoryCreate {
	thc.mutation.SetID(u)
	return thc
}

// Mutation returns the TransactionHistoryMutation object of the builder.
func (thc *TransactionHistoryCreate) Mutation() *TransactionHistoryMutation {
	return thc.mutation
}

// Save creates the TransactionHistory in the database.
func (thc *TransactionHistoryCreate) Save(ctx context.Context) (*TransactionHistory, error) {
	thc.defaults()
	return withHooks(ctx, thc.sqlSave, thc.mutation, thc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (thc *TransactionHistoryCreate) SaveX(ctx context.Context) *TransactionHistory {
	v, err := thc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thc *TransactionHistoryCreate) Exec(ctx context.Context) error {
	_, err := thc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thc *TransactionHistoryCreate) ExecX(ctx context.Context) {
	if err := thc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thc *TransactionHistoryCreate) defaults() {
	if _, ok := thc.mutation.CreatedAt(); !ok {
		v := transactionhistory.DefaultCreatedAt()
		thc.mutation.SetCreatedAt(v)
	}
	if _, ok := thc.mutation.UpdatedAt(); !ok {
		v := transactionhistory.DefaultUpdatedAt()
		thc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thc *TransactionHistoryCreate) check() error {
	if _, ok := thc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TransactionHistory.created_at"`)}
	}
	if _, ok := thc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TransactionHistory.updated_at"`)}
	}
	if _, ok := thc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TransactionHistory.user_id"`)}
	}
	if _, ok := thc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "TransactionHistory.amount"`)}
	}
	if _, ok := thc.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "TransactionHistory.note"`)}
	}
	return nil
}

func (thc *TransactionHistoryCreate) sqlSave(ctx context.Context) (*TransactionHistory, error) {
	if err := thc.check(); err != nil {
		return nil, err
	}
	_node, _spec := thc.createSpec()
	if err := sqlgraph.CreateNode(ctx, thc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	thc.mutation.id = &_node.ID
	thc.mutation.done = true
	return _node, nil
}

func (thc *TransactionHistoryCreate) createSpec() (*TransactionHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TransactionHistory{config: thc.config}
		_spec = sqlgraph.NewCreateSpec(transactionhistory.Table, sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = thc.conflict
	if id, ok := thc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := thc.mutation.CreatedAt(); ok {
		_spec.SetField(transactionhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := thc.mutation.UpdatedAt(); ok {
		_spec.SetField(transactionhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := thc.mutation.UserID(); ok {
		_spec.SetField(transactionhistory.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := thc.mutation.Amount(); ok {
		_spec.SetField(transactionhistory.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := thc.mutation.Note(); ok {
		_spec.SetField(transactionhistory.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TransactionHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransactionHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (thc *TransactionHistoryCreate) OnConflict(opts ...sql.ConflictOption) *TransactionHistoryUpsertOne {
	thc.conflict = opts
	return &TransactionHistoryUpsertOne{
		create: thc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TransactionHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (thc *TransactionHistoryCreate) OnConflictColumns(columns ...string) *TransactionHistoryUpsertOne {
	thc.conflict = append(thc.conflict, sql.ConflictColumns(columns...))
	return &TransactionHistoryUpsertOne{
		create: thc,
	}
}

type (
	// TransactionHistoryUpsertOne is the builder for "upsert"-ing
	//  one TransactionHistory node.
	TransactionHistoryUpsertOne struct {
		create *TransactionHistoryCreate
	}

	// TransactionHistoryUpsert is the "OnConflict" setter.
	TransactionHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionHistoryUpsert) SetUpdatedAt(v time.Time) *TransactionHistoryUpsert {
	u.Set(transactionhistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionHistoryUpsert) UpdateUpdatedAt() *TransactionHistoryUpsert {
	u.SetExcluded(transactionhistory.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *TransactionHistoryUpsert) SetUserID(v uint64) *TransactionHistoryUpsert {
	u.Set(transactionhistory.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TransactionHistoryUpsert) UpdateUserID() *TransactionHistoryUpsert {
	u.SetExcluded(transactionhistory.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *TransactionHistoryUpsert) AddUserID(v uint64) *TransactionHistoryUpsert {
	u.Add(transactionhistory.FieldUserID, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *TransactionHistoryUpsert) SetAmount(v float64) *TransactionHistoryUpsert {
	u.Set(transactionhistory.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransactionHistoryUpsert) UpdateAmount() *TransactionHistoryUpsert {
	u.SetExcluded(transactionhistory.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *TransactionHistoryUpsert) AddAmount(v float64) *TransactionHistoryUpsert {
	u.Add(transactionhistory.FieldAmount, v)
	return u
}

// SetNote sets the "note" field.
func (u *TransactionHistoryUpsert) SetNote(v string) *TransactionHistoryUpsert {
	u.Set(transactionhistory.FieldNote, v)
	return u
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *TransactionHistoryUpsert) UpdateNote() *TransactionHistoryUpsert {
	u.SetExcluded(transactionhistory.FieldNote)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TransactionHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transactionhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransactionHistoryUpsertOne) UpdateNewValues() *TransactionHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(transactionhistory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(transactionhistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TransactionHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransactionHistoryUpsertOne) Ignore() *TransactionHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransactionHistoryUpsertOne) DoNothing() *TransactionHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransactionHistoryCreate.OnConflict
// documentation for more info.
func (u *TransactionHistoryUpsertOne) Update(set func(*TransactionHistoryUpsert)) *TransactionHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransactionHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionHistoryUpsertOne) SetUpdatedAt(v time.Time) *TransactionHistoryUpsertOne {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionHistoryUpsertOne) UpdateUpdatedAt() *TransactionHistoryUpsertOne {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *TransactionHistoryUpsertOne) SetUserID(v uint64) *TransactionHistoryUpsertOne {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *TransactionHistoryUpsertOne) AddUserID(v uint64) *TransactionHistoryUpsertOne {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TransactionHistoryUpsertOne) UpdateUserID() *TransactionHistoryUpsertOne {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.UpdateUserID()
	})
}

// SetAmount sets the "amount" field.
func (u *TransactionHistoryUpsertOne) SetAmount(v float64) *TransactionHistoryUpsertOne {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TransactionHistoryUpsertOne) AddAmount(v float64) *TransactionHistoryUpsertOne {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransactionHistoryUpsertOne) UpdateAmount() *TransactionHistoryUpsertOne {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.UpdateAmount()
	})
}

// SetNote sets the "note" field.
func (u *TransactionHistoryUpsertOne) SetNote(v string) *TransactionHistoryUpsertOne {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *TransactionHistoryUpsertOne) UpdateNote() *TransactionHistoryUpsertOne {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.UpdateNote()
	})
}

// Exec executes the query.
func (u *TransactionHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransactionHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransactionHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransactionHistoryUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransactionHistoryUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransactionHistoryCreateBulk is the builder for creating many TransactionHistory entities in bulk.
type TransactionHistoryCreateBulk struct {
	config
	err      error
	builders []*TransactionHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the TransactionHistory entities in the database.
func (thcb *TransactionHistoryCreateBulk) Save(ctx context.Context) ([]*TransactionHistory, error) {
	if thcb.err != nil {
		return nil, thcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(thcb.builders))
	nodes := make([]*TransactionHistory, len(thcb.builders))
	mutators := make([]Mutator, len(thcb.builders))
	for i := range thcb.builders {
		func(i int, root context.Context) {
			builder := thcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, thcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = thcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, thcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, thcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (thcb *TransactionHistoryCreateBulk) SaveX(ctx context.Context) []*TransactionHistory {
	v, err := thcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thcb *TransactionHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := thcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thcb *TransactionHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := thcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TransactionHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransactionHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (thcb *TransactionHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransactionHistoryUpsertBulk {
	thcb.conflict = opts
	return &TransactionHistoryUpsertBulk{
		create: thcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TransactionHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (thcb *TransactionHistoryCreateBulk) OnConflictColumns(columns ...string) *TransactionHistoryUpsertBulk {
	thcb.conflict = append(thcb.conflict, sql.ConflictColumns(columns...))
	return &TransactionHistoryUpsertBulk{
		create: thcb,
	}
}

// TransactionHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of TransactionHistory nodes.
type TransactionHistoryUpsertBulk struct {
	create *TransactionHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TransactionHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transactionhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransactionHistoryUpsertBulk) UpdateNewValues() *TransactionHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(transactionhistory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(transactionhistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TransactionHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransactionHistoryUpsertBulk) Ignore() *TransactionHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransactionHistoryUpsertBulk) DoNothing() *TransactionHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransactionHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *TransactionHistoryUpsertBulk) Update(set func(*TransactionHistoryUpsert)) *TransactionHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransactionHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionHistoryUpsertBulk) SetUpdatedAt(v time.Time) *TransactionHistoryUpsertBulk {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionHistoryUpsertBulk) UpdateUpdatedAt() *TransactionHistoryUpsertBulk {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *TransactionHistoryUpsertBulk) SetUserID(v uint64) *TransactionHistoryUpsertBulk {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *TransactionHistoryUpsertBulk) AddUserID(v uint64) *TransactionHistoryUpsertBulk {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TransactionHistoryUpsertBulk) UpdateUserID() *TransactionHistoryUpsertBulk {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.UpdateUserID()
	})
}

// SetAmount sets the "amount" field.
func (u *TransactionHistoryUpsertBulk) SetAmount(v float64) *TransactionHistoryUpsertBulk {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TransactionHistoryUpsertBulk) AddAmount(v float64) *TransactionHistoryUpsertBulk {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransactionHistoryUpsertBulk) UpdateAmount() *TransactionHistoryUpsertBulk {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.UpdateAmount()
	})
}

// SetNote sets the "note" field.
func (u *TransactionHistoryUpsertBulk) SetNote(v string) *TransactionHistoryUpsertBulk {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *TransactionHistoryUpsertBulk) UpdateNote() *TransactionHistoryUpsertBulk {
	return u.Update(func(s *TransactionHistoryUpsert) {
		s.UpdateNote()
	})
}

// Exec executes the query.
func (u *TransactionHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TransactionHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransactionHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransactionHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
