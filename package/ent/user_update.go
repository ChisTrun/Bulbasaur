// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bulbasaur/package/ent/google"
	"bulbasaur/package/ent/local"
	"bulbasaur/package/ent/predicate"
	"bulbasaur/package/ent/role"
	"bulbasaur/package/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetTenantID sets the "tenant_id" field.
func (uu *UserUpdate) SetTenantID(s string) *UserUpdate {
	uu.mutation.SetTenantID(s)
	return uu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenantID(s *string) *UserUpdate {
	if s != nil {
		uu.SetTenantID(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetMetadata sets the "metadata" field.
func (uu *UserUpdate) SetMetadata(s string) *UserUpdate {
	uu.mutation.SetMetadata(s)
	return uu
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMetadata(s *string) *UserUpdate {
	if s != nil {
		uu.SetMetadata(*s)
	}
	return uu
}

// ClearMetadata clears the value of the "metadata" field.
func (uu *UserUpdate) ClearMetadata() *UserUpdate {
	uu.mutation.ClearMetadata()
	return uu
}

// SetLastSignedIn sets the "last_signed_in" field.
func (uu *UserUpdate) SetLastSignedIn(t time.Time) *UserUpdate {
	uu.mutation.SetLastSignedIn(t)
	return uu
}

// SetNillableLastSignedIn sets the "last_signed_in" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastSignedIn(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastSignedIn(*t)
	}
	return uu
}

// ClearLastSignedIn clears the value of the "last_signed_in" field.
func (uu *UserUpdate) ClearLastSignedIn() *UserUpdate {
	uu.mutation.ClearLastSignedIn()
	return uu
}

// SetRoleID sets the "role_id" field.
func (uu *UserUpdate) SetRoleID(u uint64) *UserUpdate {
	uu.mutation.SetRoleID(u)
	return uu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRoleID(u *uint64) *UserUpdate {
	if u != nil {
		uu.SetRoleID(*u)
	}
	return uu
}

// SetMyIDID sets the "my_id" edge to the Local entity by ID.
func (uu *UserUpdate) SetMyIDID(id uint64) *UserUpdate {
	uu.mutation.SetMyIDID(id)
	return uu
}

// SetNillableMyIDID sets the "my_id" edge to the Local entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableMyIDID(id *uint64) *UserUpdate {
	if id != nil {
		uu = uu.SetMyIDID(*id)
	}
	return uu
}

// SetMyID sets the "my_id" edge to the Local entity.
func (uu *UserUpdate) SetMyID(l *Local) *UserUpdate {
	return uu.SetMyIDID(l.ID)
}

// SetGoogleID sets the "google" edge to the Google entity by ID.
func (uu *UserUpdate) SetGoogleID(id uint64) *UserUpdate {
	uu.mutation.SetGoogleID(id)
	return uu
}

// SetNillableGoogleID sets the "google" edge to the Google entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableGoogleID(id *uint64) *UserUpdate {
	if id != nil {
		uu = uu.SetGoogleID(*id)
	}
	return uu
}

// SetGoogle sets the "google" edge to the Google entity.
func (uu *UserUpdate) SetGoogle(g *Google) *UserUpdate {
	return uu.SetGoogleID(g.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (uu *UserUpdate) SetRole(r *Role) *UserUpdate {
	return uu.SetRoleID(r.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearMyID clears the "my_id" edge to the Local entity.
func (uu *UserUpdate) ClearMyID() *UserUpdate {
	uu.mutation.ClearMyID()
	return uu
}

// ClearGoogle clears the "google" edge to the Google entity.
func (uu *UserUpdate) ClearGoogle() *UserUpdate {
	uu.mutation.ClearGoogle()
	return uu
}

// ClearRole clears the "role" edge to the Role entity.
func (uu *UserUpdate) ClearRole() *UserUpdate {
	uu.mutation.ClearRole()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if uu.mutation.RoleCleared() && len(uu.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.TenantID(); ok {
		_spec.SetField(user.FieldTenantID, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.Metadata(); ok {
		_spec.SetField(user.FieldMetadata, field.TypeString, value)
	}
	if uu.mutation.MetadataCleared() {
		_spec.ClearField(user.FieldMetadata, field.TypeString)
	}
	if value, ok := uu.mutation.LastSignedIn(); ok {
		_spec.SetField(user.FieldLastSignedIn, field.TypeTime, value)
	}
	if uu.mutation.LastSignedInCleared() {
		_spec.ClearField(user.FieldLastSignedIn, field.TypeTime)
	}
	if uu.mutation.MyIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MyIDTable,
			Columns: []string{user.MyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(local.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MyIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MyIDTable,
			Columns: []string{user.MyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(local.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GoogleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.GoogleTable,
			Columns: []string{user.GoogleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(google.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GoogleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.GoogleTable,
			Columns: []string{user.GoogleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(google.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetTenantID sets the "tenant_id" field.
func (uuo *UserUpdateOne) SetTenantID(s string) *UserUpdateOne {
	uuo.mutation.SetTenantID(s)
	return uuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenantID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTenantID(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetMetadata sets the "metadata" field.
func (uuo *UserUpdateOne) SetMetadata(s string) *UserUpdateOne {
	uuo.mutation.SetMetadata(s)
	return uuo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMetadata(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMetadata(*s)
	}
	return uuo
}

// ClearMetadata clears the value of the "metadata" field.
func (uuo *UserUpdateOne) ClearMetadata() *UserUpdateOne {
	uuo.mutation.ClearMetadata()
	return uuo
}

// SetLastSignedIn sets the "last_signed_in" field.
func (uuo *UserUpdateOne) SetLastSignedIn(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastSignedIn(t)
	return uuo
}

// SetNillableLastSignedIn sets the "last_signed_in" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastSignedIn(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastSignedIn(*t)
	}
	return uuo
}

// ClearLastSignedIn clears the value of the "last_signed_in" field.
func (uuo *UserUpdateOne) ClearLastSignedIn() *UserUpdateOne {
	uuo.mutation.ClearLastSignedIn()
	return uuo
}

// SetRoleID sets the "role_id" field.
func (uuo *UserUpdateOne) SetRoleID(u uint64) *UserUpdateOne {
	uuo.mutation.SetRoleID(u)
	return uuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoleID(u *uint64) *UserUpdateOne {
	if u != nil {
		uuo.SetRoleID(*u)
	}
	return uuo
}

// SetMyIDID sets the "my_id" edge to the Local entity by ID.
func (uuo *UserUpdateOne) SetMyIDID(id uint64) *UserUpdateOne {
	uuo.mutation.SetMyIDID(id)
	return uuo
}

// SetNillableMyIDID sets the "my_id" edge to the Local entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMyIDID(id *uint64) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetMyIDID(*id)
	}
	return uuo
}

// SetMyID sets the "my_id" edge to the Local entity.
func (uuo *UserUpdateOne) SetMyID(l *Local) *UserUpdateOne {
	return uuo.SetMyIDID(l.ID)
}

// SetGoogleID sets the "google" edge to the Google entity by ID.
func (uuo *UserUpdateOne) SetGoogleID(id uint64) *UserUpdateOne {
	uuo.mutation.SetGoogleID(id)
	return uuo
}

// SetNillableGoogleID sets the "google" edge to the Google entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGoogleID(id *uint64) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetGoogleID(*id)
	}
	return uuo
}

// SetGoogle sets the "google" edge to the Google entity.
func (uuo *UserUpdateOne) SetGoogle(g *Google) *UserUpdateOne {
	return uuo.SetGoogleID(g.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (uuo *UserUpdateOne) SetRole(r *Role) *UserUpdateOne {
	return uuo.SetRoleID(r.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearMyID clears the "my_id" edge to the Local entity.
func (uuo *UserUpdateOne) ClearMyID() *UserUpdateOne {
	uuo.mutation.ClearMyID()
	return uuo
}

// ClearGoogle clears the "google" edge to the Google entity.
func (uuo *UserUpdateOne) ClearGoogle() *UserUpdateOne {
	uuo.mutation.ClearGoogle()
	return uuo
}

// ClearRole clears the "role" edge to the Role entity.
func (uuo *UserUpdateOne) ClearRole() *UserUpdateOne {
	uuo.mutation.ClearRole()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if uuo.mutation.RoleCleared() && len(uuo.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.TenantID(); ok {
		_spec.SetField(user.FieldTenantID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.Metadata(); ok {
		_spec.SetField(user.FieldMetadata, field.TypeString, value)
	}
	if uuo.mutation.MetadataCleared() {
		_spec.ClearField(user.FieldMetadata, field.TypeString)
	}
	if value, ok := uuo.mutation.LastSignedIn(); ok {
		_spec.SetField(user.FieldLastSignedIn, field.TypeTime, value)
	}
	if uuo.mutation.LastSignedInCleared() {
		_spec.ClearField(user.FieldLastSignedIn, field.TypeTime)
	}
	if uuo.mutation.MyIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MyIDTable,
			Columns: []string{user.MyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(local.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MyIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MyIDTable,
			Columns: []string{user.MyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(local.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GoogleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.GoogleTable,
			Columns: []string{user.GoogleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(google.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GoogleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.GoogleTable,
			Columns: []string{user.GoogleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(google.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
