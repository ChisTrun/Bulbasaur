// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bulbasaur/package/ent/local"
	"bulbasaur/package/ent/predicate"
	"bulbasaur/package/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LocalUpdate is the builder for updating Local entities.
type LocalUpdate struct {
	config
	hooks     []Hook
	mutation  *LocalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LocalUpdate builder.
func (lu *LocalUpdate) Where(ps ...predicate.Local) *LocalUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LocalUpdate) SetUpdatedAt(t time.Time) *LocalUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetTenantID sets the "tenant_id" field.
func (lu *LocalUpdate) SetTenantID(s string) *LocalUpdate {
	lu.mutation.SetTenantID(s)
	return lu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (lu *LocalUpdate) SetNillableTenantID(s *string) *LocalUpdate {
	if s != nil {
		lu.SetTenantID(*s)
	}
	return lu
}

// SetUserID sets the "user_id" field.
func (lu *LocalUpdate) SetUserID(u uint64) *LocalUpdate {
	lu.mutation.SetUserID(u)
	return lu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lu *LocalUpdate) SetNillableUserID(u *uint64) *LocalUpdate {
	if u != nil {
		lu.SetUserID(*u)
	}
	return lu
}

// SetUsername sets the "username" field.
func (lu *LocalUpdate) SetUsername(s string) *LocalUpdate {
	lu.mutation.SetUsername(s)
	return lu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (lu *LocalUpdate) SetNillableUsername(s *string) *LocalUpdate {
	if s != nil {
		lu.SetUsername(*s)
	}
	return lu
}

// ClearUsername clears the value of the "username" field.
func (lu *LocalUpdate) ClearUsername() *LocalUpdate {
	lu.mutation.ClearUsername()
	return lu
}

// SetPassword sets the "password" field.
func (lu *LocalUpdate) SetPassword(s string) *LocalUpdate {
	lu.mutation.SetPassword(s)
	return lu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (lu *LocalUpdate) SetNillablePassword(s *string) *LocalUpdate {
	if s != nil {
		lu.SetPassword(*s)
	}
	return lu
}

// ClearPassword clears the value of the "password" field.
func (lu *LocalUpdate) ClearPassword() *LocalUpdate {
	lu.mutation.ClearPassword()
	return lu
}

// SetUser sets the "user" edge to the User entity.
func (lu *LocalUpdate) SetUser(u *User) *LocalUpdate {
	return lu.SetUserID(u.ID)
}

// Mutation returns the LocalMutation object of the builder.
func (lu *LocalUpdate) Mutation() *LocalMutation {
	return lu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lu *LocalUpdate) ClearUser() *LocalUpdate {
	lu.mutation.ClearUser()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LocalUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LocalUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LocalUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LocalUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LocalUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := local.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LocalUpdate) check() error {
	if lu.mutation.UserCleared() && len(lu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Local.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lu *LocalUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LocalUpdate {
	lu.modifiers = append(lu.modifiers, modifiers...)
	return lu
}

func (lu *LocalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(local.Table, local.Columns, sqlgraph.NewFieldSpec(local.FieldID, field.TypeUint64))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(local.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.TenantID(); ok {
		_spec.SetField(local.FieldTenantID, field.TypeString, value)
	}
	if value, ok := lu.mutation.Username(); ok {
		_spec.SetField(local.FieldUsername, field.TypeString, value)
	}
	if lu.mutation.UsernameCleared() {
		_spec.ClearField(local.FieldUsername, field.TypeString)
	}
	if value, ok := lu.mutation.Password(); ok {
		_spec.SetField(local.FieldPassword, field.TypeString, value)
	}
	if lu.mutation.PasswordCleared() {
		_spec.ClearField(local.FieldPassword, field.TypeString)
	}
	if lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   local.UserTable,
			Columns: []string{local.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   local.UserTable,
			Columns: []string{local.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{local.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LocalUpdateOne is the builder for updating a single Local entity.
type LocalUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LocalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LocalUpdateOne) SetUpdatedAt(t time.Time) *LocalUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetTenantID sets the "tenant_id" field.
func (luo *LocalUpdateOne) SetTenantID(s string) *LocalUpdateOne {
	luo.mutation.SetTenantID(s)
	return luo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (luo *LocalUpdateOne) SetNillableTenantID(s *string) *LocalUpdateOne {
	if s != nil {
		luo.SetTenantID(*s)
	}
	return luo
}

// SetUserID sets the "user_id" field.
func (luo *LocalUpdateOne) SetUserID(u uint64) *LocalUpdateOne {
	luo.mutation.SetUserID(u)
	return luo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (luo *LocalUpdateOne) SetNillableUserID(u *uint64) *LocalUpdateOne {
	if u != nil {
		luo.SetUserID(*u)
	}
	return luo
}

// SetUsername sets the "username" field.
func (luo *LocalUpdateOne) SetUsername(s string) *LocalUpdateOne {
	luo.mutation.SetUsername(s)
	return luo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (luo *LocalUpdateOne) SetNillableUsername(s *string) *LocalUpdateOne {
	if s != nil {
		luo.SetUsername(*s)
	}
	return luo
}

// ClearUsername clears the value of the "username" field.
func (luo *LocalUpdateOne) ClearUsername() *LocalUpdateOne {
	luo.mutation.ClearUsername()
	return luo
}

// SetPassword sets the "password" field.
func (luo *LocalUpdateOne) SetPassword(s string) *LocalUpdateOne {
	luo.mutation.SetPassword(s)
	return luo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (luo *LocalUpdateOne) SetNillablePassword(s *string) *LocalUpdateOne {
	if s != nil {
		luo.SetPassword(*s)
	}
	return luo
}

// ClearPassword clears the value of the "password" field.
func (luo *LocalUpdateOne) ClearPassword() *LocalUpdateOne {
	luo.mutation.ClearPassword()
	return luo
}

// SetUser sets the "user" edge to the User entity.
func (luo *LocalUpdateOne) SetUser(u *User) *LocalUpdateOne {
	return luo.SetUserID(u.ID)
}

// Mutation returns the LocalMutation object of the builder.
func (luo *LocalUpdateOne) Mutation() *LocalMutation {
	return luo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (luo *LocalUpdateOne) ClearUser() *LocalUpdateOne {
	luo.mutation.ClearUser()
	return luo
}

// Where appends a list predicates to the LocalUpdate builder.
func (luo *LocalUpdateOne) Where(ps ...predicate.Local) *LocalUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LocalUpdateOne) Select(field string, fields ...string) *LocalUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Local entity.
func (luo *LocalUpdateOne) Save(ctx context.Context) (*Local, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LocalUpdateOne) SaveX(ctx context.Context) *Local {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LocalUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LocalUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LocalUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := local.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LocalUpdateOne) check() error {
	if luo.mutation.UserCleared() && len(luo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Local.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (luo *LocalUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LocalUpdateOne {
	luo.modifiers = append(luo.modifiers, modifiers...)
	return luo
}

func (luo *LocalUpdateOne) sqlSave(ctx context.Context) (_node *Local, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(local.Table, local.Columns, sqlgraph.NewFieldSpec(local.FieldID, field.TypeUint64))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Local.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, local.FieldID)
		for _, f := range fields {
			if !local.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != local.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(local.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.TenantID(); ok {
		_spec.SetField(local.FieldTenantID, field.TypeString, value)
	}
	if value, ok := luo.mutation.Username(); ok {
		_spec.SetField(local.FieldUsername, field.TypeString, value)
	}
	if luo.mutation.UsernameCleared() {
		_spec.ClearField(local.FieldUsername, field.TypeString)
	}
	if value, ok := luo.mutation.Password(); ok {
		_spec.SetField(local.FieldPassword, field.TypeString, value)
	}
	if luo.mutation.PasswordCleared() {
		_spec.ClearField(local.FieldPassword, field.TypeString)
	}
	if luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   local.UserTable,
			Columns: []string{local.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   local.UserTable,
			Columns: []string{local.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(luo.modifiers...)
	_node = &Local{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{local.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
