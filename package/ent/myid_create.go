// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bulbasaur/package/ent/myid"
	"bulbasaur/package/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MyIDCreate is the builder for creating a MyID entity.
type MyIDCreate struct {
	config
	mutation *MyIDMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mic *MyIDCreate) SetCreatedAt(t time.Time) *MyIDCreate {
	mic.mutation.SetCreatedAt(t)
	return mic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mic *MyIDCreate) SetNillableCreatedAt(t *time.Time) *MyIDCreate {
	if t != nil {
		mic.SetCreatedAt(*t)
	}
	return mic
}

// SetUpdatedAt sets the "updated_at" field.
func (mic *MyIDCreate) SetUpdatedAt(t time.Time) *MyIDCreate {
	mic.mutation.SetUpdatedAt(t)
	return mic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mic *MyIDCreate) SetNillableUpdatedAt(t *time.Time) *MyIDCreate {
	if t != nil {
		mic.SetUpdatedAt(*t)
	}
	return mic
}

// SetTenantID sets the "tenant_id" field.
func (mic *MyIDCreate) SetTenantID(s string) *MyIDCreate {
	mic.mutation.SetTenantID(s)
	return mic
}

// SetUserID sets the "user_id" field.
func (mic *MyIDCreate) SetUserID(u uint64) *MyIDCreate {
	mic.mutation.SetUserID(u)
	return mic
}

// SetUsername sets the "username" field.
func (mic *MyIDCreate) SetUsername(s string) *MyIDCreate {
	mic.mutation.SetUsername(s)
	return mic
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (mic *MyIDCreate) SetNillableUsername(s *string) *MyIDCreate {
	if s != nil {
		mic.SetUsername(*s)
	}
	return mic
}

// SetPassword sets the "password" field.
func (mic *MyIDCreate) SetPassword(s string) *MyIDCreate {
	mic.mutation.SetPassword(s)
	return mic
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (mic *MyIDCreate) SetNillablePassword(s *string) *MyIDCreate {
	if s != nil {
		mic.SetPassword(*s)
	}
	return mic
}

// SetID sets the "id" field.
func (mic *MyIDCreate) SetID(u uint64) *MyIDCreate {
	mic.mutation.SetID(u)
	return mic
}

// SetUser sets the "user" edge to the User entity.
func (mic *MyIDCreate) SetUser(u *User) *MyIDCreate {
	return mic.SetUserID(u.ID)
}

// Mutation returns the MyIDMutation object of the builder.
func (mic *MyIDCreate) Mutation() *MyIDMutation {
	return mic.mutation
}

// Save creates the MyID in the database.
func (mic *MyIDCreate) Save(ctx context.Context) (*MyID, error) {
	mic.defaults()
	return withHooks(ctx, mic.sqlSave, mic.mutation, mic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mic *MyIDCreate) SaveX(ctx context.Context) *MyID {
	v, err := mic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mic *MyIDCreate) Exec(ctx context.Context) error {
	_, err := mic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mic *MyIDCreate) ExecX(ctx context.Context) {
	if err := mic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mic *MyIDCreate) defaults() {
	if _, ok := mic.mutation.CreatedAt(); !ok {
		v := myid.DefaultCreatedAt()
		mic.mutation.SetCreatedAt(v)
	}
	if _, ok := mic.mutation.UpdatedAt(); !ok {
		v := myid.DefaultUpdatedAt()
		mic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mic *MyIDCreate) check() error {
	if _, ok := mic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MyID.created_at"`)}
	}
	if _, ok := mic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MyID.updated_at"`)}
	}
	if _, ok := mic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "MyID.tenant_id"`)}
	}
	if _, ok := mic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "MyID.user_id"`)}
	}
	if len(mic.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "MyID.user"`)}
	}
	return nil
}

func (mic *MyIDCreate) sqlSave(ctx context.Context) (*MyID, error) {
	if err := mic.check(); err != nil {
		return nil, err
	}
	_node, _spec := mic.createSpec()
	if err := sqlgraph.CreateNode(ctx, mic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	mic.mutation.id = &_node.ID
	mic.mutation.done = true
	return _node, nil
}

func (mic *MyIDCreate) createSpec() (*MyID, *sqlgraph.CreateSpec) {
	var (
		_node = &MyID{config: mic.config}
		_spec = sqlgraph.NewCreateSpec(myid.Table, sqlgraph.NewFieldSpec(myid.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = mic.conflict
	if id, ok := mic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mic.mutation.CreatedAt(); ok {
		_spec.SetField(myid.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mic.mutation.UpdatedAt(); ok {
		_spec.SetField(myid.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mic.mutation.TenantID(); ok {
		_spec.SetField(myid.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := mic.mutation.Username(); ok {
		_spec.SetField(myid.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := mic.mutation.Password(); ok {
		_spec.SetField(myid.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if nodes := mic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   myid.UserTable,
			Columns: []string{myid.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MyID.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MyIDUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mic *MyIDCreate) OnConflict(opts ...sql.ConflictOption) *MyIDUpsertOne {
	mic.conflict = opts
	return &MyIDUpsertOne{
		create: mic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MyID.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mic *MyIDCreate) OnConflictColumns(columns ...string) *MyIDUpsertOne {
	mic.conflict = append(mic.conflict, sql.ConflictColumns(columns...))
	return &MyIDUpsertOne{
		create: mic,
	}
}

type (
	// MyIDUpsertOne is the builder for "upsert"-ing
	//  one MyID node.
	MyIDUpsertOne struct {
		create *MyIDCreate
	}

	// MyIDUpsert is the "OnConflict" setter.
	MyIDUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *MyIDUpsert) SetUpdatedAt(v time.Time) *MyIDUpsert {
	u.Set(myid.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MyIDUpsert) UpdateUpdatedAt() *MyIDUpsert {
	u.SetExcluded(myid.FieldUpdatedAt)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *MyIDUpsert) SetTenantID(v string) *MyIDUpsert {
	u.Set(myid.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MyIDUpsert) UpdateTenantID() *MyIDUpsert {
	u.SetExcluded(myid.FieldTenantID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *MyIDUpsert) SetUserID(v uint64) *MyIDUpsert {
	u.Set(myid.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MyIDUpsert) UpdateUserID() *MyIDUpsert {
	u.SetExcluded(myid.FieldUserID)
	return u
}

// SetUsername sets the "username" field.
func (u *MyIDUpsert) SetUsername(v string) *MyIDUpsert {
	u.Set(myid.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *MyIDUpsert) UpdateUsername() *MyIDUpsert {
	u.SetExcluded(myid.FieldUsername)
	return u
}

// ClearUsername clears the value of the "username" field.
func (u *MyIDUpsert) ClearUsername() *MyIDUpsert {
	u.SetNull(myid.FieldUsername)
	return u
}

// SetPassword sets the "password" field.
func (u *MyIDUpsert) SetPassword(v string) *MyIDUpsert {
	u.Set(myid.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MyIDUpsert) UpdatePassword() *MyIDUpsert {
	u.SetExcluded(myid.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *MyIDUpsert) ClearPassword() *MyIDUpsert {
	u.SetNull(myid.FieldPassword)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MyID.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(myid.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MyIDUpsertOne) UpdateNewValues() *MyIDUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(myid.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(myid.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MyID.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MyIDUpsertOne) Ignore() *MyIDUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MyIDUpsertOne) DoNothing() *MyIDUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MyIDCreate.OnConflict
// documentation for more info.
func (u *MyIDUpsertOne) Update(set func(*MyIDUpsert)) *MyIDUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MyIDUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MyIDUpsertOne) SetUpdatedAt(v time.Time) *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MyIDUpsertOne) UpdateUpdatedAt() *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *MyIDUpsertOne) SetTenantID(v string) *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MyIDUpsertOne) UpdateTenantID() *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.UpdateTenantID()
	})
}

// SetUserID sets the "user_id" field.
func (u *MyIDUpsertOne) SetUserID(v uint64) *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MyIDUpsertOne) UpdateUserID() *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.UpdateUserID()
	})
}

// SetUsername sets the "username" field.
func (u *MyIDUpsertOne) SetUsername(v string) *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *MyIDUpsertOne) UpdateUsername() *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *MyIDUpsertOne) ClearUsername() *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.ClearUsername()
	})
}

// SetPassword sets the "password" field.
func (u *MyIDUpsertOne) SetPassword(v string) *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MyIDUpsertOne) UpdatePassword() *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *MyIDUpsertOne) ClearPassword() *MyIDUpsertOne {
	return u.Update(func(s *MyIDUpsert) {
		s.ClearPassword()
	})
}

// Exec executes the query.
func (u *MyIDUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MyIDCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MyIDUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MyIDUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MyIDUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MyIDCreateBulk is the builder for creating many MyID entities in bulk.
type MyIDCreateBulk struct {
	config
	err      error
	builders []*MyIDCreate
	conflict []sql.ConflictOption
}

// Save creates the MyID entities in the database.
func (micb *MyIDCreateBulk) Save(ctx context.Context) ([]*MyID, error) {
	if micb.err != nil {
		return nil, micb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(micb.builders))
	nodes := make([]*MyID, len(micb.builders))
	mutators := make([]Mutator, len(micb.builders))
	for i := range micb.builders {
		func(i int, root context.Context) {
			builder := micb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MyIDMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, micb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = micb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, micb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, micb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (micb *MyIDCreateBulk) SaveX(ctx context.Context) []*MyID {
	v, err := micb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (micb *MyIDCreateBulk) Exec(ctx context.Context) error {
	_, err := micb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (micb *MyIDCreateBulk) ExecX(ctx context.Context) {
	if err := micb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MyID.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MyIDUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (micb *MyIDCreateBulk) OnConflict(opts ...sql.ConflictOption) *MyIDUpsertBulk {
	micb.conflict = opts
	return &MyIDUpsertBulk{
		create: micb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MyID.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (micb *MyIDCreateBulk) OnConflictColumns(columns ...string) *MyIDUpsertBulk {
	micb.conflict = append(micb.conflict, sql.ConflictColumns(columns...))
	return &MyIDUpsertBulk{
		create: micb,
	}
}

// MyIDUpsertBulk is the builder for "upsert"-ing
// a bulk of MyID nodes.
type MyIDUpsertBulk struct {
	create *MyIDCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MyID.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(myid.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MyIDUpsertBulk) UpdateNewValues() *MyIDUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(myid.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(myid.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MyID.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MyIDUpsertBulk) Ignore() *MyIDUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MyIDUpsertBulk) DoNothing() *MyIDUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MyIDCreateBulk.OnConflict
// documentation for more info.
func (u *MyIDUpsertBulk) Update(set func(*MyIDUpsert)) *MyIDUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MyIDUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MyIDUpsertBulk) SetUpdatedAt(v time.Time) *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MyIDUpsertBulk) UpdateUpdatedAt() *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *MyIDUpsertBulk) SetTenantID(v string) *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *MyIDUpsertBulk) UpdateTenantID() *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.UpdateTenantID()
	})
}

// SetUserID sets the "user_id" field.
func (u *MyIDUpsertBulk) SetUserID(v uint64) *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *MyIDUpsertBulk) UpdateUserID() *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.UpdateUserID()
	})
}

// SetUsername sets the "username" field.
func (u *MyIDUpsertBulk) SetUsername(v string) *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *MyIDUpsertBulk) UpdateUsername() *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *MyIDUpsertBulk) ClearUsername() *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.ClearUsername()
	})
}

// SetPassword sets the "password" field.
func (u *MyIDUpsertBulk) SetPassword(v string) *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MyIDUpsertBulk) UpdatePassword() *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *MyIDUpsertBulk) ClearPassword() *MyIDUpsertBulk {
	return u.Update(func(s *MyIDUpsert) {
		s.ClearPassword()
	})
}

// Exec executes the query.
func (u *MyIDUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MyIDCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MyIDCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MyIDUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
