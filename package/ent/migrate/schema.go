// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ActionsColumns holds the columns for the "actions" table.
	ActionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// ActionsTable holds the schema information for the "actions" table.
	ActionsTable = &schema.Table{
		Name:       "actions",
		Columns:    ActionsColumns,
		PrimaryKey: []*schema.Column{ActionsColumns[0]},
	}
	// GooglesColumns holds the columns for the "googles" table.
	GooglesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeUint64, Unique: true},
	}
	// GooglesTable holds the schema information for the "googles" table.
	GooglesTable = &schema.Table{
		Name:       "googles",
		Columns:    GooglesColumns,
		PrimaryKey: []*schema.Column{GooglesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "googles_users_google",
				Columns:    []*schema.Column{GooglesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "google_tenant_id_email",
				Unique:  true,
				Columns: []*schema.Column{GooglesColumns[3], GooglesColumns[4]},
			},
		},
	}
	// MyIdsColumns holds the columns for the "my_ids" table.
	MyIdsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeString},
		{Name: "username", Type: field.TypeString, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64, Unique: true},
	}
	// MyIdsTable holds the schema information for the "my_ids" table.
	MyIdsTable = &schema.Table{
		Name:       "my_ids",
		Columns:    MyIdsColumns,
		PrimaryKey: []*schema.Column{MyIdsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "my_ids_users_my_id",
				Columns:    []*schema.Column{MyIdsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "myid_tenant_id_username",
				Unique:  true,
				Columns: []*schema.Column{MyIdsColumns[3], MyIdsColumns[4]},
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "action_id", Type: field.TypeUint64},
		{Name: "role_id", Type: field.TypeUint64},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "permissions_actions_permission",
				Columns:    []*schema.Column{PermissionsColumns[1]},
				RefColumns: []*schema.Column{ActionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "permissions_roles_permission",
				Columns:    []*schema.Column{PermissionsColumns[2]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "permission_role_id_action_id",
				Unique:  true,
				Columns: []*schema.Column{PermissionsColumns[2], PermissionsColumns[1]},
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "last_signed_in", Type: field.TypeTime, Nullable: true},
		{Name: "role_id", Type: field.TypeUint64},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_roles_user",
				Columns:    []*schema.Column{UsersColumns[7]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_tenant_id_id",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[3], UsersColumns[0]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ActionsTable,
		GooglesTable,
		MyIdsTable,
		PermissionsTable,
		RolesTable,
		UsersTable,
	}
)

func init() {
	GooglesTable.ForeignKeys[0].RefTable = UsersTable
	MyIdsTable.ForeignKeys[0].RefTable = UsersTable
	PermissionsTable.ForeignKeys[0].RefTable = ActionsTable
	PermissionsTable.ForeignKeys[1].RefTable = RolesTable
	UsersTable.ForeignKeys[0].RefTable = RolesTable
}
