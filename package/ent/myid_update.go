// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bulbasaur/package/ent/myid"
	"bulbasaur/package/ent/predicate"
	"bulbasaur/package/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MyIDUpdate is the builder for updating MyID entities.
type MyIDUpdate struct {
	config
	hooks     []Hook
	mutation  *MyIDMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MyIDUpdate builder.
func (miu *MyIDUpdate) Where(ps ...predicate.MyID) *MyIDUpdate {
	miu.mutation.Where(ps...)
	return miu
}

// SetUpdatedAt sets the "updated_at" field.
func (miu *MyIDUpdate) SetUpdatedAt(t time.Time) *MyIDUpdate {
	miu.mutation.SetUpdatedAt(t)
	return miu
}

// SetTenantID sets the "tenant_id" field.
func (miu *MyIDUpdate) SetTenantID(s string) *MyIDUpdate {
	miu.mutation.SetTenantID(s)
	return miu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (miu *MyIDUpdate) SetNillableTenantID(s *string) *MyIDUpdate {
	if s != nil {
		miu.SetTenantID(*s)
	}
	return miu
}

// SetUserID sets the "user_id" field.
func (miu *MyIDUpdate) SetUserID(u uint64) *MyIDUpdate {
	miu.mutation.SetUserID(u)
	return miu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (miu *MyIDUpdate) SetNillableUserID(u *uint64) *MyIDUpdate {
	if u != nil {
		miu.SetUserID(*u)
	}
	return miu
}

// SetUsername sets the "username" field.
func (miu *MyIDUpdate) SetUsername(s string) *MyIDUpdate {
	miu.mutation.SetUsername(s)
	return miu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (miu *MyIDUpdate) SetNillableUsername(s *string) *MyIDUpdate {
	if s != nil {
		miu.SetUsername(*s)
	}
	return miu
}

// ClearUsername clears the value of the "username" field.
func (miu *MyIDUpdate) ClearUsername() *MyIDUpdate {
	miu.mutation.ClearUsername()
	return miu
}

// SetPassword sets the "password" field.
func (miu *MyIDUpdate) SetPassword(s string) *MyIDUpdate {
	miu.mutation.SetPassword(s)
	return miu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (miu *MyIDUpdate) SetNillablePassword(s *string) *MyIDUpdate {
	if s != nil {
		miu.SetPassword(*s)
	}
	return miu
}

// ClearPassword clears the value of the "password" field.
func (miu *MyIDUpdate) ClearPassword() *MyIDUpdate {
	miu.mutation.ClearPassword()
	return miu
}

// SetUser sets the "user" edge to the User entity.
func (miu *MyIDUpdate) SetUser(u *User) *MyIDUpdate {
	return miu.SetUserID(u.ID)
}

// Mutation returns the MyIDMutation object of the builder.
func (miu *MyIDUpdate) Mutation() *MyIDMutation {
	return miu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (miu *MyIDUpdate) ClearUser() *MyIDUpdate {
	miu.mutation.ClearUser()
	return miu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *MyIDUpdate) Save(ctx context.Context) (int, error) {
	miu.defaults()
	return withHooks(ctx, miu.sqlSave, miu.mutation, miu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miu *MyIDUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *MyIDUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *MyIDUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (miu *MyIDUpdate) defaults() {
	if _, ok := miu.mutation.UpdatedAt(); !ok {
		v := myid.UpdateDefaultUpdatedAt()
		miu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miu *MyIDUpdate) check() error {
	if miu.mutation.UserCleared() && len(miu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MyID.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (miu *MyIDUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MyIDUpdate {
	miu.modifiers = append(miu.modifiers, modifiers...)
	return miu
}

func (miu *MyIDUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := miu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(myid.Table, myid.Columns, sqlgraph.NewFieldSpec(myid.FieldID, field.TypeUint64))
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.UpdatedAt(); ok {
		_spec.SetField(myid.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := miu.mutation.TenantID(); ok {
		_spec.SetField(myid.FieldTenantID, field.TypeString, value)
	}
	if value, ok := miu.mutation.Username(); ok {
		_spec.SetField(myid.FieldUsername, field.TypeString, value)
	}
	if miu.mutation.UsernameCleared() {
		_spec.ClearField(myid.FieldUsername, field.TypeString)
	}
	if value, ok := miu.mutation.Password(); ok {
		_spec.SetField(myid.FieldPassword, field.TypeString, value)
	}
	if miu.mutation.PasswordCleared() {
		_spec.ClearField(myid.FieldPassword, field.TypeString)
	}
	if miu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   myid.UserTable,
			Columns: []string{myid.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   myid.UserTable,
			Columns: []string{myid.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(miu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{myid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	miu.mutation.done = true
	return n, nil
}

// MyIDUpdateOne is the builder for updating a single MyID entity.
type MyIDUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MyIDMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (miuo *MyIDUpdateOne) SetUpdatedAt(t time.Time) *MyIDUpdateOne {
	miuo.mutation.SetUpdatedAt(t)
	return miuo
}

// SetTenantID sets the "tenant_id" field.
func (miuo *MyIDUpdateOne) SetTenantID(s string) *MyIDUpdateOne {
	miuo.mutation.SetTenantID(s)
	return miuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (miuo *MyIDUpdateOne) SetNillableTenantID(s *string) *MyIDUpdateOne {
	if s != nil {
		miuo.SetTenantID(*s)
	}
	return miuo
}

// SetUserID sets the "user_id" field.
func (miuo *MyIDUpdateOne) SetUserID(u uint64) *MyIDUpdateOne {
	miuo.mutation.SetUserID(u)
	return miuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (miuo *MyIDUpdateOne) SetNillableUserID(u *uint64) *MyIDUpdateOne {
	if u != nil {
		miuo.SetUserID(*u)
	}
	return miuo
}

// SetUsername sets the "username" field.
func (miuo *MyIDUpdateOne) SetUsername(s string) *MyIDUpdateOne {
	miuo.mutation.SetUsername(s)
	return miuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (miuo *MyIDUpdateOne) SetNillableUsername(s *string) *MyIDUpdateOne {
	if s != nil {
		miuo.SetUsername(*s)
	}
	return miuo
}

// ClearUsername clears the value of the "username" field.
func (miuo *MyIDUpdateOne) ClearUsername() *MyIDUpdateOne {
	miuo.mutation.ClearUsername()
	return miuo
}

// SetPassword sets the "password" field.
func (miuo *MyIDUpdateOne) SetPassword(s string) *MyIDUpdateOne {
	miuo.mutation.SetPassword(s)
	return miuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (miuo *MyIDUpdateOne) SetNillablePassword(s *string) *MyIDUpdateOne {
	if s != nil {
		miuo.SetPassword(*s)
	}
	return miuo
}

// ClearPassword clears the value of the "password" field.
func (miuo *MyIDUpdateOne) ClearPassword() *MyIDUpdateOne {
	miuo.mutation.ClearPassword()
	return miuo
}

// SetUser sets the "user" edge to the User entity.
func (miuo *MyIDUpdateOne) SetUser(u *User) *MyIDUpdateOne {
	return miuo.SetUserID(u.ID)
}

// Mutation returns the MyIDMutation object of the builder.
func (miuo *MyIDUpdateOne) Mutation() *MyIDMutation {
	return miuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (miuo *MyIDUpdateOne) ClearUser() *MyIDUpdateOne {
	miuo.mutation.ClearUser()
	return miuo
}

// Where appends a list predicates to the MyIDUpdate builder.
func (miuo *MyIDUpdateOne) Where(ps ...predicate.MyID) *MyIDUpdateOne {
	miuo.mutation.Where(ps...)
	return miuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (miuo *MyIDUpdateOne) Select(field string, fields ...string) *MyIDUpdateOne {
	miuo.fields = append([]string{field}, fields...)
	return miuo
}

// Save executes the query and returns the updated MyID entity.
func (miuo *MyIDUpdateOne) Save(ctx context.Context) (*MyID, error) {
	miuo.defaults()
	return withHooks(ctx, miuo.sqlSave, miuo.mutation, miuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *MyIDUpdateOne) SaveX(ctx context.Context) *MyID {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *MyIDUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *MyIDUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (miuo *MyIDUpdateOne) defaults() {
	if _, ok := miuo.mutation.UpdatedAt(); !ok {
		v := myid.UpdateDefaultUpdatedAt()
		miuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miuo *MyIDUpdateOne) check() error {
	if miuo.mutation.UserCleared() && len(miuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MyID.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (miuo *MyIDUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MyIDUpdateOne {
	miuo.modifiers = append(miuo.modifiers, modifiers...)
	return miuo
}

func (miuo *MyIDUpdateOne) sqlSave(ctx context.Context) (_node *MyID, err error) {
	if err := miuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(myid.Table, myid.Columns, sqlgraph.NewFieldSpec(myid.FieldID, field.TypeUint64))
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MyID.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := miuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, myid.FieldID)
		for _, f := range fields {
			if !myid.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != myid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := miuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miuo.mutation.UpdatedAt(); ok {
		_spec.SetField(myid.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := miuo.mutation.TenantID(); ok {
		_spec.SetField(myid.FieldTenantID, field.TypeString, value)
	}
	if value, ok := miuo.mutation.Username(); ok {
		_spec.SetField(myid.FieldUsername, field.TypeString, value)
	}
	if miuo.mutation.UsernameCleared() {
		_spec.ClearField(myid.FieldUsername, field.TypeString)
	}
	if value, ok := miuo.mutation.Password(); ok {
		_spec.SetField(myid.FieldPassword, field.TypeString, value)
	}
	if miuo.mutation.PasswordCleared() {
		_spec.ClearField(myid.FieldPassword, field.TypeString)
	}
	if miuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   myid.UserTable,
			Columns: []string{myid.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   myid.UserTable,
			Columns: []string{myid.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(miuo.modifiers...)
	_node = &MyID{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{myid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	miuo.mutation.done = true
	return _node, nil
}
