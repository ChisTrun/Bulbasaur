// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldLastSignedIn holds the string denoting the last_signed_in field in the database.
	FieldLastSignedIn = "last_signed_in"
	// EdgeMyID holds the string denoting the my_id edge name in mutations.
	EdgeMyID = "my_id"
	// EdgeGoogle holds the string denoting the google edge name in mutations.
	EdgeGoogle = "google"
	// Table holds the table name of the user in the database.
	Table = "users"
	// MyIDTable is the table that holds the my_id relation/edge.
	MyIDTable = "my_ids"
	// MyIDInverseTable is the table name for the MyID entity.
	// It exists in this package in order to avoid circular dependency with the "myid" package.
	MyIDInverseTable = "my_ids"
	// MyIDColumn is the table column denoting the my_id relation/edge.
	MyIDColumn = "user_id"
	// GoogleTable is the table that holds the google relation/edge.
	GoogleTable = "googles"
	// GoogleInverseTable is the table name for the Google entity.
	// It exists in this package in order to avoid circular dependency with the "google" package.
	GoogleInverseTable = "googles"
	// GoogleColumn is the table column denoting the google relation/edge.
	GoogleColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTenantID,
	FieldMetadata,
	FieldLastSignedIn,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByLastSignedIn orders the results by the last_signed_in field.
func ByLastSignedIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSignedIn, opts...).ToFunc()
}

// ByMyIDField orders the results by my_id field.
func ByMyIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMyIDStep(), sql.OrderByField(field, opts...))
	}
}

// ByGoogleField orders the results by google field.
func ByGoogleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGoogleStep(), sql.OrderByField(field, opts...))
	}
}
func newMyIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MyIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MyIDTable, MyIDColumn),
	)
}
func newGoogleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GoogleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, GoogleTable, GoogleColumn),
	)
}
